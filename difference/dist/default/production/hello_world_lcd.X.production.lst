

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sun Mar 30 00:43:40 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0004                     fsr             equ	4
    58     0004                     fsr0            equ	4
    59     0000                     indf            equ	0
    60     0000                     indf0           equ	0
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0000                     INDF            equ	0	;# 
    66     0001                     TMR0            equ	1	;# 
    67     0002                     PCL             equ	2	;# 
    68     0003                     STATUS          equ	3	;# 
    69     0004                     FSR             equ	4	;# 
    70     0005                     PORTA           equ	5	;# 
    71     0006                     PORTB           equ	6	;# 
    72     0007                     PORTC           equ	7	;# 
    73     0008                     PORTD           equ	8	;# 
    74     0009                     PORTE           equ	9	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     0088                     TRISD           equ	136	;# 
   105     0089                     TRISE           equ	137	;# 
   106     008C                     PIE1            equ	140	;# 
   107     008D                     PIE2            equ	141	;# 
   108     008E                     PCON            equ	142	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0094                     SSPSTAT         equ	148	;# 
   113     0098                     TXSTA           equ	152	;# 
   114     0099                     SPBRG           equ	153	;# 
   115     009C                     CMCON           equ	156	;# 
   116     009D                     CVRCON          equ	157	;# 
   117     009E                     ADRESL          equ	158	;# 
   118     009F                     ADCON1          equ	159	;# 
   119     010C                     EEDATA          equ	268	;# 
   120     010D                     EEADR           equ	269	;# 
   121     010E                     EEDATH          equ	270	;# 
   122     010F                     EEADRH          equ	271	;# 
   123     018C                     EECON1          equ	396	;# 
   124     018D                     EECON2          equ	397	;# 
   125     0000                     INDF            equ	0	;# 
   126     0001                     TMR0            equ	1	;# 
   127     0002                     PCL             equ	2	;# 
   128     0003                     STATUS          equ	3	;# 
   129     0004                     FSR             equ	4	;# 
   130     0005                     PORTA           equ	5	;# 
   131     0006                     PORTB           equ	6	;# 
   132     0007                     PORTC           equ	7	;# 
   133     0008                     PORTD           equ	8	;# 
   134     0009                     PORTE           equ	9	;# 
   135     000A                     PCLATH          equ	10	;# 
   136     000B                     INTCON          equ	11	;# 
   137     000C                     PIR1            equ	12	;# 
   138     000D                     PIR2            equ	13	;# 
   139     000E                     TMR1            equ	14	;# 
   140     000E                     TMR1L           equ	14	;# 
   141     000F                     TMR1H           equ	15	;# 
   142     0010                     T1CON           equ	16	;# 
   143     0011                     TMR2            equ	17	;# 
   144     0012                     T2CON           equ	18	;# 
   145     0013                     SSPBUF          equ	19	;# 
   146     0014                     SSPCON          equ	20	;# 
   147     0015                     CCPR1           equ	21	;# 
   148     0015                     CCPR1L          equ	21	;# 
   149     0016                     CCPR1H          equ	22	;# 
   150     0017                     CCP1CON         equ	23	;# 
   151     0018                     RCSTA           equ	24	;# 
   152     0019                     TXREG           equ	25	;# 
   153     001A                     RCREG           equ	26	;# 
   154     001B                     CCPR2           equ	27	;# 
   155     001B                     CCPR2L          equ	27	;# 
   156     001C                     CCPR2H          equ	28	;# 
   157     001D                     CCP2CON         equ	29	;# 
   158     001E                     ADRESH          equ	30	;# 
   159     001F                     ADCON0          equ	31	;# 
   160     0081                     OPTION_REG      equ	129	;# 
   161     0085                     TRISA           equ	133	;# 
   162     0086                     TRISB           equ	134	;# 
   163     0087                     TRISC           equ	135	;# 
   164     0088                     TRISD           equ	136	;# 
   165     0089                     TRISE           equ	137	;# 
   166     008C                     PIE1            equ	140	;# 
   167     008D                     PIE2            equ	141	;# 
   168     008E                     PCON            equ	142	;# 
   169     0091                     SSPCON2         equ	145	;# 
   170     0092                     PR2             equ	146	;# 
   171     0093                     SSPADD          equ	147	;# 
   172     0094                     SSPSTAT         equ	148	;# 
   173     0098                     TXSTA           equ	152	;# 
   174     0099                     SPBRG           equ	153	;# 
   175     009C                     CMCON           equ	156	;# 
   176     009D                     CVRCON          equ	157	;# 
   177     009E                     ADRESL          equ	158	;# 
   178     009F                     ADCON1          equ	159	;# 
   179     010C                     EEDATA          equ	268	;# 
   180     010D                     EEADR           equ	269	;# 
   181     010E                     EEDATH          equ	270	;# 
   182     010F                     EEADRH          equ	271	;# 
   183     018C                     EECON1          equ	396	;# 
   184     018D                     EECON2          equ	397	;# 
   185                           
   186                           	psect	idataCOMMON
   187     0651                     __pidataCOMMON:
   188                           
   189                           ;initializer for _num1
   190     0651  34C8               	retlw	200
   191     0652  3400               	retlw	0
   192                           
   193                           	psect	idataBANK0
   194     064F                     __pidataBANK0:	
   195                           ;initializer for _num2
   196                           
   197     064F  3464               	retlw	100
   198     0650  3400               	retlw	0
   199     0008                     _PORTD          set	8
   200     0007                     _PORTC          set	7
   201     0088                     _TRISD          set	136
   202     0087                     _TRISC          set	135
   203                           
   204                           	psect	cinit
   205     07DC                     start_initialization:	
   206                           ; #config settings
   207                           
   208     07DC                     __initialization:
   209                           
   210                           ; Initialize objects allocated to BANK0
   211     07DC  120A  118A  264F  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   212     07E1  00A6               	movwf	__pdataBANK0& (0+127)
   213     07E2  120A  118A  2650  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   214     07E7  00A7               	movwf	(__pdataBANK0+1)& (0+127)
   215                           
   216                           ; Initialize objects allocated to COMMON
   217     07E8  120A  118A  2651  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   218     07ED  00FC               	movwf	__pdataCOMMON& (0+127)
   219     07EE  120A  118A  2652  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   220     07F3  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   221                           
   222                           ; Clear objects allocated to BANK0
   223     07F4  01A0               	clrf	__pbssBANK0& (0+127)
   224     07F5  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   225     07F6  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   226     07F7  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   227     07F8  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   228     07F9  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   229                           
   230                           ; Clear objects allocated to COMMON
   231     07FA  01FA               	clrf	__pbssCOMMON& (0+127)
   232     07FB  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2ED1   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241     007A                     __pbssCOMMON:
   242     007A                     _diff:
   243     007A                     	ds	2
   244                           
   245                           	psect	dataCOMMON
   246     007C                     __pdataCOMMON:
   247     007C                     _num1:
   248     007C                     	ds	2
   249                           
   250                           	psect	bssBANK0
   251     0020                     __pbssBANK0:
   252     0020                     _displayBuffer:
   253     0020                     	ds	6
   254                           
   255                           	psect	dataBANK0
   256     0026                     __pdataBANK0:
   257     0026                     _num2:
   258     0026                     	ds	2
   259                           
   260                           	psect	cstackCOMMON
   261     0070                     __pcstackCOMMON:
   262     0070                     ?_initLCD:
   263     0070                     ?_lcd_command:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?_lcd_data:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_delay_ms:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?___lwdiv:	
   276                           ; 2 bytes @ 0x0
   277                           
   278     0070                     ?___lwmod:	
   279                           ; 2 bytes @ 0x0
   280                           
   281     0070                     delay_ms@count:	
   282                           ; 2 bytes @ 0x0
   283                           
   284     0070                     ___lwdiv@divisor:	
   285                           ; 2 bytes @ 0x0
   286                           
   287     0070                     ___lwmod@divisor:	
   288                           ; 2 bytes @ 0x0
   289                           
   290                           
   291                           ; 2 bytes @ 0x0
   292     0070                     	ds	2
   293     0072                     ___lwdiv@dividend:
   294     0072                     ___lwmod@dividend:	
   295                           ; 2 bytes @ 0x2
   296                           
   297     0072                     ??_lcd_command:	
   298                           ; 2 bytes @ 0x2
   299                           
   300     0072                     ??_lcd_data:	
   301                           ; 1 bytes @ 0x2
   302                           
   303     0072                     ??_delay_ms:	
   304                           ; 1 bytes @ 0x2
   305                           
   306                           
   307                           ; 1 bytes @ 0x2
   308     0072                     	ds	1
   309     0073                     lcd_command@cmd:
   310     0073                     lcd_data@data:	
   311                           ; 1 bytes @ 0x3
   312                           
   313                           
   314                           ; 1 bytes @ 0x3
   315     0073                     	ds	1
   316     0074                     ___lwmod@counter:
   317     0074                     ___lwdiv@quotient:	
   318                           ; 1 bytes @ 0x4
   319                           
   320     0074                     ??_initLCD:	
   321                           ; 2 bytes @ 0x4
   322                           
   323     0074                     ??___lwdiv:	
   324                           ; 1 bytes @ 0x4
   325                           
   326     0074                     ??___lwmod:	
   327                           ; 1 bytes @ 0x4
   328                           
   329                           
   330                           ; 1 bytes @ 0x4
   331     0074                     	ds	2
   332     0076                     ___lwdiv@counter:
   333                           
   334                           ; 1 bytes @ 0x6
   335     0076                     	ds	1
   336     0077                     ?_lcd_output:
   337     0077                     lcd_output@value:	
   338                           ; 1 bytes @ 0x7
   339                           
   340                           
   341                           ; 2 bytes @ 0x7
   342     0077                     	ds	2
   343     0079                     lcd_output@index:
   344     0079                     ??_lcd_output:	
   345                           ; 1 bytes @ 0x9
   346                           
   347                           
   348                           ; 1 bytes @ 0x9
   349     0079                     	ds	1
   350     007A                     ??_main:
   351                           
   352                           	psect	maintext
   353     06D1                     __pmaintext:	
   354                           ; 1 bytes @ 0xA
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 35 in file "main.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;		None
   365 ;; Return value:  Size  Location     Type
   366 ;;                  2   32[None  ] int 
   367 ;; Registers used:
   368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   369 ;; Tracked objects:
   370 ;;		On entry : B00/0
   371 ;;		On exit  : 0/0
   372 ;;		Unchanged: 0/0
   373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   374 ;;      Params:         0       0       0       0       0
   375 ;;      Locals:         0       0       0       0       0
   376 ;;      Temps:          0       0       0       0       0
   377 ;;      Totals:         0       0       0       0       0
   378 ;;Total ram usage:        0 bytes
   379 ;; Hardware stack levels required when called: 3
   380 ;; This function calls:
   381 ;;		_initLCD
   382 ;;		_lcd_command
   383 ;;		_lcd_data
   384 ;;		_lcd_output
   385 ;; This function is called by:
   386 ;;		Startup code after reset
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390     06D1                     _main:	
   391                           ;psect for function _main
   392                           
   393     06D1                     l846:	
   394                           ;incstack = 0
   395                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   396                           
   397                           
   398                           ;main.c: 36:     initLCD();
   399     06D1  120A  118A  270B  120A  118A  	fcall	_initLCD
   400     06D6                     l848:
   401                           
   402                           ;main.c: 38:     diff = num1 - num2;
   403     06D6  3064               	movlw	100
   404     06D7  00FA               	movwf	_diff
   405     06D8  3000               	movlw	0
   406     06D9  00FB               	movwf	_diff+1
   407     06DA                     l850:
   408                           
   409                           ;main.c: 40:     lcd_command(0x80);
   410     06DA  3080               	movlw	128
   411     06DB  120A  118A  267C  120A  118A  	fcall	_lcd_command
   412     06E0                     l852:
   413                           
   414                           ;main.c: 42:     lcd_output(num1);
   415     06E0  30C8               	movlw	200
   416     06E1  00F7               	movwf	lcd_output@value
   417     06E2  3000               	movlw	0
   418     06E3  00F8               	movwf	lcd_output@value+1
   419     06E4  120A  118A  278E  120A  118A  	fcall	_lcd_output
   420     06E9                     l854:
   421                           
   422                           ;main.c: 43:     lcd_data('-');
   423     06E9  302D               	movlw	45
   424     06EA  120A  118A  2660  120A  118A  	fcall	_lcd_data
   425     06EF                     l856:
   426                           
   427                           ;main.c: 44:     lcd_output(num2);
   428     06EF  3064               	movlw	100
   429     06F0  00F7               	movwf	lcd_output@value
   430     06F1  3000               	movlw	0
   431     06F2  00F8               	movwf	lcd_output@value+1
   432     06F3  120A  118A  278E  120A  118A  	fcall	_lcd_output
   433     06F8                     l858:
   434                           
   435                           ;main.c: 45:     lcd_data('=');
   436     06F8  303D               	movlw	61
   437     06F9  120A  118A  2660  120A  118A  	fcall	_lcd_data
   438     06FE                     l864:	
   439                           ;main.c: 46:     if(num1<num2){
   440                           
   441                           
   442                           ;main.c: 50:     lcd_output(diff);
   443     06FE  3064               	movlw	100
   444     06FF  00F7               	movwf	lcd_output@value
   445     0700  3000               	movlw	0
   446     0701  00F8               	movwf	lcd_output@value+1
   447     0702  120A  118A  278E  120A  118A  	fcall	_lcd_output
   448     0707                     l34:	
   449                           ;main.c: 52:     while (1);
   450                           
   451     0707                     l35:
   452     0707  2F07               	goto	l34
   453     0708  120A  118A  2800   	ljmp	start
   454     070B                     __end_of_main:
   455                           
   456                           	psect	text1
   457     078E                     __ptext1:	
   458 ;; *************** function _lcd_output *****************
   459 ;; Defined at:
   460 ;;		line 92 in file "main.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;  value           2    7[COMMON] unsigned int 
   463 ;; Auto vars:     Size  Location     Type
   464 ;;  index           1    9[COMMON] unsigned char 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   474 ;;      Params:         2       0       0       0       0
   475 ;;      Locals:         1       0       0       0       0
   476 ;;      Temps:          0       0       0       0       0
   477 ;;      Totals:         3       0       0       0       0
   478 ;;Total ram usage:        3 bytes
   479 ;; Hardware stack levels used: 1
   480 ;; Hardware stack levels required when called: 2
   481 ;; This function calls:
   482 ;;		___lwdiv
   483 ;;		___lwmod
   484 ;;		_lcd_data
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490     078E                     _lcd_output:	
   491                           ;psect for function _lcd_output
   492                           
   493     078E                     l826:	
   494                           ;incstack = 0
   495                           ; Regs used in _lcd_output: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   496                           
   497                           
   498                           ;main.c: 93:     unsigned char index = 0;
   499     078E  01F9               	clrf	lcd_output@index
   500     078F                     l828:
   501                           
   502                           ;main.c: 95:     if (value == 0) {
   503     078F  0877               	movf	lcd_output@value,w
   504     0790  0478               	iorwf	lcd_output@value+1,w
   505     0791  1D03               	btfss	3,2
   506     0792  2F94               	goto	u321
   507     0793  2F95               	goto	u320
   508     0794                     u321:
   509     0794  2FC3               	goto	l840
   510     0795                     u320:
   511     0795                     l830:
   512                           
   513                           ;main.c: 96:         lcd_data('0');
   514     0795  3030               	movlw	48
   515     0796  120A  118A  2660  120A  118A  	fcall	_lcd_data
   516     079B  2FDB               	goto	l50
   517     079C                     l834:
   518                           
   519                           ;main.c: 101:         displayBuffer[index++] = (value % 10) + '0';
   520     079C  0879               	movf	lcd_output@index,w
   521     079D  3E20               	addlw	(low (_displayBuffer| 0))& (0+255)
   522     079E  0084               	movwf	4
   523     079F  300A               	movlw	10
   524     07A0  00F0               	movwf	___lwmod@divisor
   525     07A1  3000               	movlw	0
   526     07A2  00F1               	movwf	___lwmod@divisor+1
   527     07A3  0878               	movf	lcd_output@value+1,w
   528     07A4  00F3               	movwf	___lwmod@dividend+1
   529     07A5  0877               	movf	lcd_output@value,w
   530     07A6  00F2               	movwf	___lwmod@dividend
   531     07A7  120A  118A  2699  120A  118A  	fcall	___lwmod
   532     07AC  0870               	movf	?___lwmod,w
   533     07AD  3E30               	addlw	48
   534     07AE  1383               	bcf	3,7	;select IRP bank0
   535     07AF  0080               	movwf	0
   536     07B0                     l836:
   537     07B0  3001               	movlw	1
   538     07B1  07F9               	addwf	lcd_output@index,f
   539     07B2                     l838:
   540                           
   541                           ;main.c: 102:         value /= 10;
   542     07B2  300A               	movlw	10
   543     07B3  00F0               	movwf	___lwdiv@divisor
   544     07B4  3000               	movlw	0
   545     07B5  00F1               	movwf	___lwdiv@divisor+1
   546     07B6  0878               	movf	lcd_output@value+1,w
   547     07B7  00F3               	movwf	___lwdiv@dividend+1
   548     07B8  0877               	movf	lcd_output@value,w
   549     07B9  00F2               	movwf	___lwdiv@dividend
   550     07BA  120A  118A  274C  120A  118A  	fcall	___lwdiv
   551     07BF  0871               	movf	?___lwdiv+1,w
   552     07C0  00F8               	movwf	lcd_output@value+1
   553     07C1  0870               	movf	?___lwdiv,w
   554     07C2  00F7               	movwf	lcd_output@value
   555     07C3                     l840:
   556                           
   557                           ;main.c: 100:     while (value > 0) {
   558     07C3  0877               	movf	lcd_output@value,w
   559     07C4  0478               	iorwf	lcd_output@value+1,w
   560     07C5  1D03               	btfss	3,2
   561     07C6  2FC8               	goto	u331
   562     07C7  2FC9               	goto	u330
   563     07C8                     u331:
   564     07C8  2F9C               	goto	l834
   565     07C9                     u330:
   566     07C9  2FD6               	goto	l844
   567     07CA                     l842:
   568                           
   569                           ;main.c: 106:         lcd_data(displayBuffer[--index]);
   570     07CA  3001               	movlw	1
   571     07CB  02F9               	subwf	lcd_output@index,f
   572     07CC  0879               	movf	lcd_output@index,w
   573     07CD  3E20               	addlw	(low (_displayBuffer| 0))& (0+255)
   574     07CE  0084               	movwf	4
   575     07CF  1383               	bcf	3,7	;select IRP bank0
   576     07D0  0800               	movf	0,w
   577     07D1  120A  118A  2660  120A  118A  	fcall	_lcd_data
   578     07D6                     l844:
   579                           
   580                           ;main.c: 105:     while (index > 0) {
   581     07D6  0879               	movf	lcd_output@index,w
   582     07D7  1D03               	btfss	3,2
   583     07D8  2FDA               	goto	u341
   584     07D9  2FDB               	goto	u340
   585     07DA                     u341:
   586     07DA  2FCA               	goto	l842
   587     07DB                     u340:
   588     07DB                     l50:
   589     07DB  0008               	return
   590     07DC                     __end_of_lcd_output:
   591                           
   592                           	psect	text2
   593     0660                     __ptext2:	
   594 ;; *************** function _lcd_data *****************
   595 ;; Defined at:
   596 ;;		line 82 in file "main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;  data            1    wreg     unsigned char 
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  data            1    3[COMMON] unsigned char 
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0, pclath, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   610 ;;      Params:         0       0       0       0       0
   611 ;;      Locals:         1       0       0       0       0
   612 ;;      Temps:          1       0       0       0       0
   613 ;;      Totals:         2       0       0       0       0
   614 ;;Total ram usage:        2 bytes
   615 ;; Hardware stack levels used: 1
   616 ;; Hardware stack levels required when called: 1
   617 ;; This function calls:
   618 ;;		_delay_ms
   619 ;; This function is called by:
   620 ;;		_main
   621 ;;		_lcd_output
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625     0660                     _lcd_data:	
   626                           ;psect for function _lcd_data
   627                           
   628                           
   629                           ;incstack = 0
   630                           ; Regs used in _lcd_data: [wreg+status,2+status,0+pclath+cstack]
   631                           ;lcd_data@data stored from wreg
   632     0660  00F3               	movwf	lcd_data@data
   633     0661                     l750:
   634                           
   635                           ;main.c: 83:     PORTC |= 0x08;
   636     0661  1283               	bcf	3,5	;RP0=0, select bank0
   637     0662  1303               	bcf	3,6	;RP1=0, select bank0
   638     0663  1587               	bsf	7,3	;volatile
   639     0664                     l752:
   640                           
   641                           ;main.c: 84:     PORTD = data;
   642     0664  0873               	movf	lcd_data@data,w
   643     0665  0088               	movwf	8	;volatile
   644     0666                     l754:
   645                           
   646                           ;main.c: 85:     PORTC |= 0x01;
   647     0666  1407               	bsf	7,0	;volatile
   648                           
   649                           ;main.c: 86:     _delay((unsigned long)((1)*(6000000/4000.0)));
   650     0667  30D6               	movlw	214
   651     0668  00F2               	movwf	??_lcd_data
   652     0669                     u357:
   653     0669  2E6A               	nop2
   654     066A  2E6B               	nop2
   655     066B  0BF2               	decfsz	??_lcd_data,f
   656     066C  2E69               	goto	u357
   657     066D  0000               	nop
   658     066E                     l756:
   659                           
   660                           ;main.c: 87:     PORTC &= ~0x01;
   661     066E  30FE               	movlw	254
   662     066F  1283               	bcf	3,5	;RP0=0, select bank0
   663     0670  1303               	bcf	3,6	;RP1=0, select bank0
   664     0671  0587               	andwf	7,f	;volatile
   665     0672                     l758:
   666                           
   667                           ;main.c: 88:     delay_ms(2);
   668     0672  3002               	movlw	2
   669     0673  00F0               	movwf	delay_ms@count
   670     0674  3000               	movlw	0
   671     0675  00F1               	movwf	delay_ms@count+1
   672     0676  120A  118A  2653  120A  118A  	fcall	_delay_ms
   673     067B                     l46:
   674     067B  0008               	return
   675     067C                     __end_of_lcd_data:
   676                           
   677                           	psect	text3
   678     0699                     __ptext3:	
   679 ;; *************** function ___lwmod *****************
   680 ;; Defined at:
   681 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  divisor         2    0[COMMON] unsigned int 
   684 ;;  dividend        2    2[COMMON] unsigned int 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  counter         1    4[COMMON] unsigned char 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  2    0[COMMON] unsigned int 
   689 ;; Registers used:
   690 ;;		wreg, status,2, status,0
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         4       0       0       0       0
   697 ;;      Locals:         1       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0
   699 ;;      Totals:         5       0       0       0       0
   700 ;;Total ram usage:        5 bytes
   701 ;; Hardware stack levels used: 1
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		_lcd_output
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709     0699                     ___lwmod:	
   710                           ;psect for function ___lwmod
   711                           
   712     0699                     l786:	
   713                           ;incstack = 0
   714                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   715                           
   716     0699  0870               	movf	___lwmod@divisor,w
   717     069A  0471               	iorwf	___lwmod@divisor+1,w
   718     069B  1903               	btfsc	3,2
   719     069C  2E9E               	goto	u261
   720     069D  2E9F               	goto	u260
   721     069E                     u261:
   722     069E  2ECC               	goto	l804
   723     069F                     u260:
   724     069F                     l788:
   725     069F  3001               	movlw	1
   726     06A0  00F4               	movwf	___lwmod@counter
   727     06A1  2EAB               	goto	l794
   728     06A2                     l790:
   729     06A2  3001               	movlw	1
   730     06A3                     u275:
   731     06A3  1003               	clrc
   732     06A4  0DF0               	rlf	___lwmod@divisor,f
   733     06A5  0DF1               	rlf	___lwmod@divisor+1,f
   734     06A6  3EFF               	addlw	-1
   735     06A7  1D03               	skipz
   736     06A8  2EA3               	goto	u275
   737     06A9                     l792:
   738     06A9  3001               	movlw	1
   739     06AA  07F4               	addwf	___lwmod@counter,f
   740     06AB                     l794:
   741     06AB  1FF1               	btfss	___lwmod@divisor+1,7
   742     06AC  2EAE               	goto	u281
   743     06AD  2EAF               	goto	u280
   744     06AE                     u281:
   745     06AE  2EA2               	goto	l790
   746     06AF                     u280:
   747     06AF                     l796:
   748     06AF  0871               	movf	___lwmod@divisor+1,w
   749     06B0  0273               	subwf	___lwmod@dividend+1,w
   750     06B1  1D03               	skipz
   751     06B2  2EB5               	goto	u295
   752     06B3  0870               	movf	___lwmod@divisor,w
   753     06B4  0272               	subwf	___lwmod@dividend,w
   754     06B5                     u295:
   755     06B5  1C03               	skipc
   756     06B6  2EB8               	goto	u291
   757     06B7  2EB9               	goto	u290
   758     06B8                     u291:
   759     06B8  2EBF               	goto	l800
   760     06B9                     u290:
   761     06B9                     l798:
   762     06B9  0870               	movf	___lwmod@divisor,w
   763     06BA  02F2               	subwf	___lwmod@dividend,f
   764     06BB  0871               	movf	___lwmod@divisor+1,w
   765     06BC  1C03               	skipc
   766     06BD  03F3               	decf	___lwmod@dividend+1,f
   767     06BE  02F3               	subwf	___lwmod@dividend+1,f
   768     06BF                     l800:
   769     06BF  3001               	movlw	1
   770     06C0                     u305:
   771     06C0  1003               	clrc
   772     06C1  0CF1               	rrf	___lwmod@divisor+1,f
   773     06C2  0CF0               	rrf	___lwmod@divisor,f
   774     06C3  3EFF               	addlw	-1
   775     06C4  1D03               	skipz
   776     06C5  2EC0               	goto	u305
   777     06C6                     l802:
   778     06C6  3001               	movlw	1
   779     06C7  02F4               	subwf	___lwmod@counter,f
   780     06C8  1D03               	btfss	3,2
   781     06C9  2ECB               	goto	u311
   782     06CA  2ECC               	goto	u310
   783     06CB                     u311:
   784     06CB  2EAF               	goto	l796
   785     06CC                     u310:
   786     06CC                     l804:
   787     06CC  0873               	movf	___lwmod@dividend+1,w
   788     06CD  00F1               	movwf	?___lwmod+1
   789     06CE  0872               	movf	___lwmod@dividend,w
   790     06CF  00F0               	movwf	?___lwmod
   791     06D0                     l438:
   792     06D0  0008               	return
   793     06D1                     __end_of___lwmod:
   794                           
   795                           	psect	text4
   796     074C                     __ptext4:	
   797 ;; *************** function ___lwdiv *****************
   798 ;; Defined at:
   799 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  divisor         2    0[COMMON] unsigned int 
   802 ;;  dividend        2    2[COMMON] unsigned int 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  quotient        2    4[COMMON] unsigned int 
   805 ;;  counter         1    6[COMMON] unsigned char 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  2    0[COMMON] unsigned int 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   815 ;;      Params:         4       0       0       0       0
   816 ;;      Locals:         3       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0
   818 ;;      Totals:         7       0       0       0       0
   819 ;;Total ram usage:        7 bytes
   820 ;; Hardware stack levels used: 1
   821 ;; This function calls:
   822 ;;		Nothing
   823 ;; This function is called by:
   824 ;;		_lcd_output
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828     074C                     ___lwdiv:	
   829                           ;psect for function ___lwdiv
   830                           
   831     074C                     l760:	
   832                           ;incstack = 0
   833                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   834                           
   835     074C  01F4               	clrf	___lwdiv@quotient
   836     074D  01F5               	clrf	___lwdiv@quotient+1
   837     074E                     l762:
   838     074E  0870               	movf	___lwdiv@divisor,w
   839     074F  0471               	iorwf	___lwdiv@divisor+1,w
   840     0750  1903               	btfsc	3,2
   841     0751  2F53               	goto	u191
   842     0752  2F54               	goto	u190
   843     0753                     u191:
   844     0753  2F89               	goto	l782
   845     0754                     u190:
   846     0754                     l764:
   847     0754  3001               	movlw	1
   848     0755  00F6               	movwf	___lwdiv@counter
   849     0756  2F60               	goto	l770
   850     0757                     l766:
   851     0757  3001               	movlw	1
   852     0758                     u205:
   853     0758  1003               	clrc
   854     0759  0DF0               	rlf	___lwdiv@divisor,f
   855     075A  0DF1               	rlf	___lwdiv@divisor+1,f
   856     075B  3EFF               	addlw	-1
   857     075C  1D03               	skipz
   858     075D  2F58               	goto	u205
   859     075E                     l768:
   860     075E  3001               	movlw	1
   861     075F  07F6               	addwf	___lwdiv@counter,f
   862     0760                     l770:
   863     0760  1FF1               	btfss	___lwdiv@divisor+1,7
   864     0761  2F63               	goto	u211
   865     0762  2F64               	goto	u210
   866     0763                     u211:
   867     0763  2F57               	goto	l766
   868     0764                     u210:
   869     0764                     l772:
   870     0764  3001               	movlw	1
   871     0765                     u225:
   872     0765  1003               	clrc
   873     0766  0DF4               	rlf	___lwdiv@quotient,f
   874     0767  0DF5               	rlf	___lwdiv@quotient+1,f
   875     0768  3EFF               	addlw	-1
   876     0769  1D03               	skipz
   877     076A  2F65               	goto	u225
   878     076B  0871               	movf	___lwdiv@divisor+1,w
   879     076C  0273               	subwf	___lwdiv@dividend+1,w
   880     076D  1D03               	skipz
   881     076E  2F71               	goto	u235
   882     076F  0870               	movf	___lwdiv@divisor,w
   883     0770  0272               	subwf	___lwdiv@dividend,w
   884     0771                     u235:
   885     0771  1C03               	skipc
   886     0772  2F74               	goto	u231
   887     0773  2F75               	goto	u230
   888     0774                     u231:
   889     0774  2F7C               	goto	l778
   890     0775                     u230:
   891     0775                     l774:
   892     0775  0870               	movf	___lwdiv@divisor,w
   893     0776  02F2               	subwf	___lwdiv@dividend,f
   894     0777  0871               	movf	___lwdiv@divisor+1,w
   895     0778  1C03               	skipc
   896     0779  03F3               	decf	___lwdiv@dividend+1,f
   897     077A  02F3               	subwf	___lwdiv@dividend+1,f
   898     077B                     l776:
   899     077B  1474               	bsf	___lwdiv@quotient,0
   900     077C                     l778:
   901     077C  3001               	movlw	1
   902     077D                     u245:
   903     077D  1003               	clrc
   904     077E  0CF1               	rrf	___lwdiv@divisor+1,f
   905     077F  0CF0               	rrf	___lwdiv@divisor,f
   906     0780  3EFF               	addlw	-1
   907     0781  1D03               	skipz
   908     0782  2F7D               	goto	u245
   909     0783                     l780:
   910     0783  3001               	movlw	1
   911     0784  02F6               	subwf	___lwdiv@counter,f
   912     0785  1D03               	btfss	3,2
   913     0786  2F88               	goto	u251
   914     0787  2F89               	goto	u250
   915     0788                     u251:
   916     0788  2F64               	goto	l772
   917     0789                     u250:
   918     0789                     l782:
   919     0789  0875               	movf	___lwdiv@quotient+1,w
   920     078A  00F1               	movwf	?___lwdiv+1
   921     078B  0874               	movf	___lwdiv@quotient,w
   922     078C  00F0               	movwf	?___lwdiv
   923     078D                     l428:
   924     078D  0008               	return
   925     078E                     __end_of___lwdiv:
   926                           
   927                           	psect	text5
   928     070B                     __ptext5:	
   929 ;; *************** function _initLCD *****************
   930 ;; Defined at:
   931 ;;		line 56 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used: 1
   951 ;; Hardware stack levels required when called: 2
   952 ;; This function calls:
   953 ;;		_delay_ms
   954 ;;		_lcd_command
   955 ;; This function is called by:
   956 ;;		_main
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960     070B                     _initLCD:	
   961                           ;psect for function _initLCD
   962                           
   963     070B                     l808:	
   964                           ;incstack = 0
   965                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   966                           
   967                           
   968                           ;main.c: 57:     TRISC = 0x00;
   969     070B  1683               	bsf	3,5	;RP0=1, select bank1
   970     070C  1303               	bcf	3,6	;RP1=0, select bank1
   971     070D  0187               	clrf	7	;volatile
   972                           
   973                           ;main.c: 58:     TRISD = 0x00;
   974     070E  0188               	clrf	8	;volatile
   975     070F                     l810:
   976                           
   977                           ;main.c: 61:     lcd_command(0x38);
   978     070F  3038               	movlw	56
   979     0710  120A  118A  267C  120A  118A  	fcall	_lcd_command
   980     0715                     l812:
   981                           
   982                           ;main.c: 62:     delay_ms(5);
   983     0715  3005               	movlw	5
   984     0716  00F0               	movwf	delay_ms@count
   985     0717  3000               	movlw	0
   986     0718  00F1               	movwf	delay_ms@count+1
   987     0719  120A  118A  2653  120A  118A  	fcall	_delay_ms
   988     071E                     l814:
   989                           
   990                           ;main.c: 63:     lcd_command(0x0C);
   991     071E  300C               	movlw	12
   992     071F  120A  118A  267C  120A  118A  	fcall	_lcd_command
   993     0724                     l816:
   994                           
   995                           ;main.c: 64:     delay_ms(5);
   996     0724  3005               	movlw	5
   997     0725  00F0               	movwf	delay_ms@count
   998     0726  3000               	movlw	0
   999     0727  00F1               	movwf	delay_ms@count+1
  1000     0728  120A  118A  2653  120A  118A  	fcall	_delay_ms
  1001     072D                     l818:
  1002                           
  1003                           ;main.c: 65:     lcd_command(0x06);
  1004     072D  3006               	movlw	6
  1005     072E  120A  118A  267C  120A  118A  	fcall	_lcd_command
  1006     0733                     l820:
  1007                           
  1008                           ;main.c: 66:     delay_ms(5);
  1009     0733  3005               	movlw	5
  1010     0734  00F0               	movwf	delay_ms@count
  1011     0735  3000               	movlw	0
  1012     0736  00F1               	movwf	delay_ms@count+1
  1013     0737  120A  118A  2653  120A  118A  	fcall	_delay_ms
  1014     073C                     l822:
  1015                           
  1016                           ;main.c: 67:     lcd_command(0x01);
  1017     073C  3001               	movlw	1
  1018     073D  120A  118A  267C  120A  118A  	fcall	_lcd_command
  1019     0742                     l824:
  1020                           
  1021                           ;main.c: 68:     delay_ms(5);
  1022     0742  3005               	movlw	5
  1023     0743  00F0               	movwf	delay_ms@count
  1024     0744  3000               	movlw	0
  1025     0745  00F1               	movwf	delay_ms@count+1
  1026     0746  120A  118A  2653  120A  118A  	fcall	_delay_ms
  1027     074B                     l40:
  1028     074B  0008               	return
  1029     074C                     __end_of_initLCD:
  1030                           
  1031                           	psect	text6
  1032     067C                     __ptext6:	
  1033 ;; *************** function _lcd_command *****************
  1034 ;; Defined at:
  1035 ;;		line 72 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;  cmd             1    wreg     unsigned char 
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  cmd             1    3[COMMON] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0, pclath, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         1       0       0       0       0
  1051 ;;      Temps:          1       0       0       0       0
  1052 ;;      Totals:         2       0       0       0       0
  1053 ;;Total ram usage:        2 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 1
  1056 ;; This function calls:
  1057 ;;		_delay_ms
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;;		_initLCD
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064     067C                     _lcd_command:	
  1065                           ;psect for function _lcd_command
  1066                           
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _lcd_command: [wreg+status,2+status,0+pclath+cstack]
  1070                           ;lcd_command@cmd stored from wreg
  1071     067C  00F3               	movwf	lcd_command@cmd
  1072     067D                     l740:
  1073                           
  1074                           ;main.c: 73:     PORTC &= ~0x08;
  1075     067D  30F7               	movlw	247
  1076     067E  1283               	bcf	3,5	;RP0=0, select bank0
  1077     067F  1303               	bcf	3,6	;RP1=0, select bank0
  1078     0680  0587               	andwf	7,f	;volatile
  1079     0681                     l742:
  1080                           
  1081                           ;main.c: 74:     PORTD = cmd;
  1082     0681  0873               	movf	lcd_command@cmd,w
  1083     0682  0088               	movwf	8	;volatile
  1084     0683                     l744:
  1085                           
  1086                           ;main.c: 75:     PORTC |= 0x01;
  1087     0683  1407               	bsf	7,0	;volatile
  1088     0684                     l746:
  1089                           
  1090                           ;main.c: 76:     _delay((unsigned long)((1)*(6000000/4000.0)));
  1091     0684  30D6               	movlw	214
  1092     0685  00F2               	movwf	??_lcd_command
  1093     0686                     u367:
  1094     0686  2E87               	nop2
  1095     0687  2E88               	nop2
  1096     0688  0BF2               	decfsz	??_lcd_command,f
  1097     0689  2E86               	goto	u367
  1098     068A  0000               	nop
  1099                           
  1100                           ;main.c: 77:     PORTC &= ~0x01;
  1101     068B  30FE               	movlw	254
  1102     068C  1283               	bcf	3,5	;RP0=0, select bank0
  1103     068D  1303               	bcf	3,6	;RP1=0, select bank0
  1104     068E  0587               	andwf	7,f	;volatile
  1105     068F                     l748:
  1106                           
  1107                           ;main.c: 78:     delay_ms(2);
  1108     068F  3002               	movlw	2
  1109     0690  00F0               	movwf	delay_ms@count
  1110     0691  3000               	movlw	0
  1111     0692  00F1               	movwf	delay_ms@count+1
  1112     0693  120A  118A  2653  120A  118A  	fcall	_delay_ms
  1113     0698                     l43:
  1114     0698  0008               	return
  1115     0699                     __end_of_lcd_command:
  1116                           
  1117                           	psect	text7
  1118     0653                     __ptext7:	
  1119 ;; *************** function _delay_ms *****************
  1120 ;; Defined at:
  1121 ;;		line 111 in file "main.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  count           2    0[COMMON] unsigned int 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;		None
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1135 ;;      Params:         2       0       0       0       0
  1136 ;;      Locals:         0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0
  1138 ;;      Totals:         2       0       0       0       0
  1139 ;;Total ram usage:        2 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_initLCD
  1145 ;;		_lcd_command
  1146 ;;		_lcd_data
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150     0653                     _delay_ms:	
  1151                           ;psect for function _delay_ms
  1152                           
  1153     0653                     l736:	
  1154                           ;incstack = 0
  1155                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  1156                           
  1157     0653                     l738:	
  1158                           ;main.c: 112:     while (--count);
  1159                           
  1160     0653  3001               	movlw	1
  1161     0654  02F0               	subwf	delay_ms@count,f
  1162     0655  3000               	movlw	0
  1163     0656  1C03               	skipc
  1164     0657  03F1               	decf	delay_ms@count+1,f
  1165     0658  02F1               	subwf	delay_ms@count+1,f
  1166     0659  0870               	movf	delay_ms@count,w
  1167     065A  0471               	iorwf	delay_ms@count+1,w
  1168     065B  1D03               	btfss	3,2
  1169     065C  2E5E               	goto	u181
  1170     065D  2E5F               	goto	u180
  1171     065E                     u181:
  1172     065E  2E53               	goto	l738
  1173     065F                     u180:
  1174     065F                     l62:
  1175     065F  0008               	return
  1176     0660                     __end_of_delay_ms:
  1177     0002                     ___latbits      equ	2
  1178     007E                     btemp           set	126	;btemp
  1179     007E                     wtemp0          set	126
  1180                           
  1181                           	psect	config
  1182                           
  1183                           ;Config register CONFIG @ 0x2007
  1184                           ;	Oscillator Selection bits
  1185                           ;	FOSC = EXTRC, RC oscillator
  1186                           ;	Watchdog Timer Enable bit
  1187                           ;	WDTE = OFF, WDT disabled
  1188                           ;	Power-up Timer Enable bit
  1189                           ;	PWRTE = OFF, PWRT disabled
  1190                           ;	Brown-out Reset Enable bit
  1191                           ;	BOREN = OFF, BOR disabled
  1192                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1193                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1194                           ;	Data EEPROM Memory Code Protection bit
  1195                           ;	CPD = OFF, Data EEPROM code protection off
  1196                           ;	Flash Program Memory Write Enable bits
  1197                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1198                           ;	In-Circuit Debugger Mode bit
  1199                           ;	DEBUG = 0x1, unprogrammed default
  1200                           ;	Flash Program Memory Code Protection bit
  1201                           ;	CP = OFF, Code protection off
  1202     2007                     	org	8199
  1203     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80      0       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_lcd_output
    _lcd_output->___lwdiv
    _lcd_data->_delay_ms
    _initLCD->_lcd_command
    _lcd_command->_delay_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     741
                            _initLCD
                        _lcd_command
                           _lcd_data
                         _lcd_output
 ---------------------------------------------------------------------------------
 (1) _lcd_output                                           3     1      2     542
                                              7 COMMON     3     1      2
                            ___lwdiv
                            ___lwmod
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             2     2      0      57
                                              2 COMMON     2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     161
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              0     0      0      85
                           _delay_ms
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          2     2      0      57
                                              2 COMMON     2     2      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2      28
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _delay_ms
     _lcd_command
       _delay_ms
   _lcd_command
   _lcd_data
     _delay_ms
   _lcd_output
     ___lwdiv
     ___lwmod
     _lcd_data

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0       8     10.0%
BITBANK0            80      0       0      0.0%
COMMON              14     10      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      22      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sun Mar 30 00:43:40 2025

           lcd_data@data 0073                       l40 074B                       l50 07DB  
                     l34 0707                       l43 0698                       l35 0707  
                     l62 065F                       l46 067B                      l428 078D  
                    l438 06D0                      l800 06BF                      l810 070F  
                    l802 06C6                      l740 067D                      l820 0733  
                    l812 0715                      l804 06CC                      l742 0681  
                    l822 073C                      l814 071E                      l750 0661  
                    l830 0795                      l736 0653                      l744 0683  
                    l824 0742                      l816 0724                      l808 070B  
                    l760 074C                      l752 0664                      l840 07C3  
                    l738 0653                      l746 0684                      l818 072D  
                    l770 0760                      l762 074E                      l754 0666  
                    l842 07CA                      l834 079C                      l826 078E  
                    l850 06DA                      l748 068F                      l780 0783  
                    l772 0764                      l764 0754                      l756 066E  
                    l844 07D6                      l836 07B0                      l828 078F  
                    l852 06E0                      l774 0775                      l766 0757  
                    l782 0789                      l790 06A2                      l758 0672  
                    l838 07B2                      l854 06E9                      l846 06D1  
                    l776 077B                      l768 075E                      l792 06A9  
                    l864 06FE                      l856 06EF                      l848 06D6  
                    l778 077C                      l794 06AB                      l786 0699  
                    l858 06F8                      l796 06AF                      l788 069F  
                    l798 06B9                      u210 0764                      u211 0763  
                    u205 0758                      u230 0775                      u310 06CC  
                    u231 0774                      u311 06CB                      u320 0795  
                    u225 0765                      u305 06C0                      u321 0794  
                    u250 0789                      u330 07C9                      u251 0788  
                    u235 0771                      u331 07C8                      u180 065F  
                    u260 069F                      u340 07DB                      u181 065E  
                    u245 077D                      u261 069E                      u341 07DA  
                    u190 0754                      u191 0753                      u280 06AF  
                    u281 06AE                      u290 06B9                      u291 06B8  
                    u275 06A3                      u357 0669                      u367 0686  
                    u295 06B5                      fsr0 0004                      indf 0000  
                   _diff 007A                     _main 06D1                     _num1 007C  
                   _num2 0026                     btemp 007E                     start 0000  
                  ?_main 0070          __end_of___lwdiv 078E          __end_of___lwmod 06D1  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088          __end_of_initLCD 074C                    status 0003  
                  wtemp0 007E          __initialization 07DC             __end_of_main 070B  
                 ??_main 007A           lcd_command@cmd 0073         __end_of_delay_ms 0660  
       __end_of_lcd_data 067C                ??___lwdiv 0074                ??___lwmod 0074  
              ??_initLCD 0074             __pdataCOMMON 007C  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 064F               __pbssBANK0 0020  
             __pmaintext 06D1                ?_delay_ms 0070               _lcd_output 078E  
              ?_lcd_data 0070                  ___lwdiv 074C                  ___lwmod 0699  
                __ptext1 078E                  __ptext2 0660                  __ptext3 0699  
                __ptext4 074C                  __ptext5 070B                  __ptext6 067C  
                __ptext7 0653                  _initLCD 070B               ??_delay_ms 0072  
             ??_lcd_data 0072     end_of_initialization 07FC              ?_lcd_output 0077  
          ??_lcd_command 0072            delay_ms@count 0070            __pidataCOMMON 0651  
    start_initialization 07DC      __end_of_lcd_command 0699              __pdataBANK0 0026  
            __pbssCOMMON 007A                ___latbits 0002         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                 ?___lwmod 0070                 ?_initLCD 0070  
       ___lwdiv@quotient 0074              _lcd_command 067C             ??_lcd_output 0079  
     __end_of_lcd_output 07DC                 _delay_ms 0653          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076                 _lcd_data 0660         ___lwmod@dividend 0072  
        lcd_output@index 0079          lcd_output@value 0077          ___lwmod@divisor 0070  
        ___lwmod@counter 0074            _displayBuffer 0020             ?_lcd_command 0070  
