

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Jul 24 00:27:00 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0004                     fsr             equ	4
    58     0004                     fsr0            equ	4
    59     0000                     indf            equ	0
    60     0000                     indf0           equ	0
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0000                     INDF            equ	0	;# 
    66     0001                     TMR0            equ	1	;# 
    67     0002                     PCL             equ	2	;# 
    68     0003                     STATUS          equ	3	;# 
    69     0004                     FSR             equ	4	;# 
    70     0005                     PORTA           equ	5	;# 
    71     0006                     PORTB           equ	6	;# 
    72     0007                     PORTC           equ	7	;# 
    73     0008                     PORTD           equ	8	;# 
    74     0009                     PORTE           equ	9	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     0088                     TRISD           equ	136	;# 
   105     0089                     TRISE           equ	137	;# 
   106     008C                     PIE1            equ	140	;# 
   107     008D                     PIE2            equ	141	;# 
   108     008E                     PCON            equ	142	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0094                     SSPSTAT         equ	148	;# 
   113     0098                     TXSTA           equ	152	;# 
   114     0099                     SPBRG           equ	153	;# 
   115     009C                     CMCON           equ	156	;# 
   116     009D                     CVRCON          equ	157	;# 
   117     009E                     ADRESL          equ	158	;# 
   118     009F                     ADCON1          equ	159	;# 
   119     010C                     EEDATA          equ	268	;# 
   120     010D                     EEADR           equ	269	;# 
   121     010E                     EEDATH          equ	270	;# 
   122     010F                     EEADRH          equ	271	;# 
   123     018C                     EECON1          equ	396	;# 
   124     018D                     EECON2          equ	397	;# 
   125     0000                     INDF            equ	0	;# 
   126     0001                     TMR0            equ	1	;# 
   127     0002                     PCL             equ	2	;# 
   128     0003                     STATUS          equ	3	;# 
   129     0004                     FSR             equ	4	;# 
   130     0005                     PORTA           equ	5	;# 
   131     0006                     PORTB           equ	6	;# 
   132     0007                     PORTC           equ	7	;# 
   133     0008                     PORTD           equ	8	;# 
   134     0009                     PORTE           equ	9	;# 
   135     000A                     PCLATH          equ	10	;# 
   136     000B                     INTCON          equ	11	;# 
   137     000C                     PIR1            equ	12	;# 
   138     000D                     PIR2            equ	13	;# 
   139     000E                     TMR1            equ	14	;# 
   140     000E                     TMR1L           equ	14	;# 
   141     000F                     TMR1H           equ	15	;# 
   142     0010                     T1CON           equ	16	;# 
   143     0011                     TMR2            equ	17	;# 
   144     0012                     T2CON           equ	18	;# 
   145     0013                     SSPBUF          equ	19	;# 
   146     0014                     SSPCON          equ	20	;# 
   147     0015                     CCPR1           equ	21	;# 
   148     0015                     CCPR1L          equ	21	;# 
   149     0016                     CCPR1H          equ	22	;# 
   150     0017                     CCP1CON         equ	23	;# 
   151     0018                     RCSTA           equ	24	;# 
   152     0019                     TXREG           equ	25	;# 
   153     001A                     RCREG           equ	26	;# 
   154     001B                     CCPR2           equ	27	;# 
   155     001B                     CCPR2L          equ	27	;# 
   156     001C                     CCPR2H          equ	28	;# 
   157     001D                     CCP2CON         equ	29	;# 
   158     001E                     ADRESH          equ	30	;# 
   159     001F                     ADCON0          equ	31	;# 
   160     0081                     OPTION_REG      equ	129	;# 
   161     0085                     TRISA           equ	133	;# 
   162     0086                     TRISB           equ	134	;# 
   163     0087                     TRISC           equ	135	;# 
   164     0088                     TRISD           equ	136	;# 
   165     0089                     TRISE           equ	137	;# 
   166     008C                     PIE1            equ	140	;# 
   167     008D                     PIE2            equ	141	;# 
   168     008E                     PCON            equ	142	;# 
   169     0091                     SSPCON2         equ	145	;# 
   170     0092                     PR2             equ	146	;# 
   171     0093                     SSPADD          equ	147	;# 
   172     0094                     SSPSTAT         equ	148	;# 
   173     0098                     TXSTA           equ	152	;# 
   174     0099                     SPBRG           equ	153	;# 
   175     009C                     CMCON           equ	156	;# 
   176     009D                     CVRCON          equ	157	;# 
   177     009E                     ADRESL          equ	158	;# 
   178     009F                     ADCON1          equ	159	;# 
   179     010C                     EEDATA          equ	268	;# 
   180     010D                     EEADR           equ	269	;# 
   181     010E                     EEDATH          equ	270	;# 
   182     010F                     EEADRH          equ	271	;# 
   183     018C                     EECON1          equ	396	;# 
   184     018D                     EECON2          equ	397	;# 
   185     000D                     _PIR2bits       set	13
   186     0006                     _PORTB          set	6
   187     0008                     _PORTD          set	8
   188     0007                     _PORTC          set	7
   189     0086                     _TRISB          set	134
   190     0088                     _TRISD          set	136
   191     0087                     _TRISC          set	135
   192     010C                     _EEDATA         set	268
   193     010D                     _EEADR          set	269
   194     018D                     _EECON2         set	397
   195     018C                     _EECON1         set	396
   196                           
   197                           	psect	strings
   198     0003                     __pstrings:
   199     0003                     stringtab:
   200     0003                     __stringtab:
   201     0003                     stringcode:	
   202                           ;	String table - string pointers are 1 byte each
   203                           
   204     0003                     stringdir:
   205     0003  3000               	movlw	high stringdir
   206     0004  008A               	movwf	10
   207     0005  0804               	movf	4,w
   208     0006  0A84               	incf	4,f
   209     0007  0782               	addwf	2,f
   210     0008                     __stringbase:
   211     0008  3400               	retlw	0
   212     0009                     __end_of__stringtab:
   213     0009                     STR_1:
   214     0009  3445               	retlw	69	;'E'
   215     000A  3445               	retlw	69	;'E'
   216     000B  3450               	retlw	80	;'P'
   217     000C  3452               	retlw	82	;'R'
   218     000D  344F               	retlw	79	;'O'
   219     000E  344D               	retlw	77	;'M'
   220     000F  3420               	retlw	32	;' '
   221     0010  3456               	retlw	86	;'V'
   222     0011  3441               	retlw	65	;'A'
   223     0012  344C               	retlw	76	;'L'
   224     0013  3455               	retlw	85	;'U'
   225     0014  3445               	retlw	69	;'E'
   226     0015  343A               	retlw	58	;':'
   227     0016  3400               	retlw	0
   228                           
   229                           	psect	cinit
   230     07F1                     start_initialization:	
   231                           ; #config settings
   232                           
   233     07F1                     __initialization:
   234                           
   235                           ; Clear objects allocated to COMMON
   236     07F1  01FA               	clrf	__pbssCOMMON& (0+127)
   237     07F2  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   238                           
   239                           ; Clear objects allocated to BANK0
   240     07F3  1383               	bcf	3,7	;select IRP bank0
   241     07F4  3020               	movlw	low __pbssBANK0
   242     07F5  0084               	movwf	4
   243     07F6  3036               	movlw	low (__pbssBANK0+22)
   244     07F7  120A  118A  251E  120A  118A  	fcall	clear_ram0
   245     07FC                     end_of_initialization:	
   246                           ;End of C runtime variable initialization code
   247                           
   248     07FC                     __end_of__initialization:
   249     07FC  0183               	clrf	3
   250     07FD  120A  118A  2E6C   	ljmp	_main	;jump to C main() function
   251                           
   252                           	psect	bssCOMMON
   253     007A                     __pbssCOMMON:
   254     007A                     _rem:
   255     007A                     	ds	2
   256                           
   257                           	psect	bssBANK0
   258     0020                     __pbssBANK0:
   259     0020                     _arr1:
   260     0020                     	ds	20
   261     0034                     _byte:
   262     0034                     	ds	2
   263                           
   264                           	psect	clrtext
   265     051E                     clear_ram0:	
   266                           ;	Called with FSR containing the base address, and
   267                           ;	W with the last address+1
   268                           
   269     051E  0064               	clrwdt	;clear the watchdog before getting into this loop
   270     051F                     clrloop0:
   271     051F  0180               	clrf	0	;clear RAM location pointed to by FSR
   272     0520  0A84               	incf	4,f	;increment pointer
   273     0521  0604               	xorwf	4,w	;XOR with final address
   274     0522  1903               	btfsc	3,2	;have we reached the end yet?
   275     0523  3400               	retlw	0	;all done for this memory range, return
   276     0524  0604               	xorwf	4,w	;XOR again to restore value
   277     0525  2D1F               	goto	clrloop0	;do the next byte
   278                           
   279                           	psect	cstackCOMMON
   280     0070                     __pcstackCOMMON:
   281     0070                     ?_lcd_command:
   282     0070                     ?_initLCD:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_lcd_data:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ?_WriteByteToEE:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ?_ReadByteFromEE:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_main:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ?_strlen:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?___lwdiv:	
   301                           ; 2 bytes @ 0x0
   302                           
   303     0070                     ?___lwmod:	
   304                           ; 2 bytes @ 0x0
   305                           
   306     0070                     WriteByteToEE@address:	
   307                           ; 2 bytes @ 0x0
   308                           
   309     0070                     strlen@s:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ___lwdiv@divisor:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ___lwmod@divisor:	
   316                           ; 2 bytes @ 0x0
   317                           
   318     0070                     ??_lcd_command:	
   319                           ; 2 bytes @ 0x0
   320                           
   321     0070                     ??_lcd_data:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ??_ReadByteFromEE:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329     0070                     	ds	1
   330     0071                     WriteByteToEE@data:
   331     0071                     ??_WriteByteToEE:	
   332                           ; 1 bytes @ 0x1
   333                           
   334                           
   335                           ; 1 bytes @ 0x1
   336     0071                     	ds	1
   337     0072                     lcd_command@cmd:
   338     0072                     lcd_data@data:	
   339                           ; 1 bytes @ 0x2
   340                           
   341     0072                     ReadByteFromEE@address:	
   342                           ; 1 bytes @ 0x2
   343                           
   344     0072                     strlen@a:	
   345                           ; 1 bytes @ 0x2
   346                           
   347     0072                     ___lwdiv@dividend:	
   348                           ; 1 bytes @ 0x2
   349                           
   350     0072                     ___lwmod@dividend:	
   351                           ; 2 bytes @ 0x2
   352                           
   353     0072                     ??_strlen:	
   354                           ; 2 bytes @ 0x2
   355                           
   356                           
   357                           ; 1 bytes @ 0x2
   358     0072                     	ds	1
   359     0073                     ??_initLCD:
   360                           
   361                           ; 1 bytes @ 0x3
   362     0073                     	ds	1
   363     0074                     ___lwmod@counter:
   364     0074                     ___lwdiv@quotient:	
   365                           ; 1 bytes @ 0x4
   366                           
   367     0074                     ??___lwdiv:	
   368                           ; 2 bytes @ 0x4
   369                           
   370     0074                     ??___lwmod:	
   371                           ; 1 bytes @ 0x4
   372                           
   373                           
   374                           ; 1 bytes @ 0x4
   375     0074                     	ds	2
   376     0076                     ___lwdiv@counter:
   377                           
   378                           ; 1 bytes @ 0x6
   379     0076                     	ds	1
   380     0077                     ??_main:
   381                           
   382                           ; 1 bytes @ 0x7
   383     0077                     	ds	3
   384                           
   385                           	psect	cstackBANK0
   386     0036                     __pcstackBANK0:
   387     0036                     main@rem:
   388                           
   389                           ; 2 bytes @ 0x0
   390     0036                     	ds	2
   391     0038                     main@i:
   392                           
   393                           ; 2 bytes @ 0x2
   394     0038                     	ds	2
   395     003A                     main@count:
   396                           
   397                           ; 2 bytes @ 0x4
   398     003A                     	ds	2
   399     003C                     main@value:
   400                           
   401                           ; 1 bytes @ 0x6
   402     003C                     	ds	1
   403     003D                     main@i_94:
   404                           
   405                           ; 2 bytes @ 0x7
   406     003D                     	ds	2
   407     003F                     main@j:
   408                           
   409                           ; 2 bytes @ 0x9
   410     003F                     	ds	2
   411                           
   412                           	psect	maintext
   413     066C                     __pmaintext:	
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 103 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  j               2    9[BANK0 ] int 
   424 ;;  rem             2    0[BANK0 ] int 
   425 ;;  count           2    4[BANK0 ] int 
   426 ;;  i               2    7[BANK0 ] int 
   427 ;;  i               2    2[BANK0 ] int 
   428 ;;  value           1    6[BANK0 ] PTR unsigned char 
   429 ;;		 -> STR_1(14), 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : B00/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   439 ;;      Params:         0       0       0       0       0
   440 ;;      Locals:         0      11       0       0       0
   441 ;;      Temps:          3       0       0       0       0
   442 ;;      Totals:         3      11       0       0       0
   443 ;;Total ram usage:       14 bytes
   444 ;; Hardware stack levels required when called: 2
   445 ;; This function calls:
   446 ;;		_ReadByteFromEE
   447 ;;		_WriteByteToEE
   448 ;;		___lwdiv
   449 ;;		___lwmod
   450 ;;		_initLCD
   451 ;;		_lcd_command
   452 ;;		_lcd_data
   453 ;;		_strlen
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459     066C                     _main:	
   460                           ;psect for function _main
   461                           
   462     066C                     l936:	
   463                           ;incstack = 0
   464                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   465                           
   466                           
   467                           ;main.c: 105:     initLCD();
   468     066C  120A  118A  2620  120A  118A  	fcall	_initLCD
   469                           
   470                           ;main.c: 106:     lcd_command(0x80);
   471     0671  3080               	movlw	128
   472     0672  120A  118A  2589  120A  118A  	fcall	_lcd_command
   473     0677                     l938:
   474                           
   475                           ;main.c: 107:     char* value="EEPROM VALUE:";
   476     0677  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   477     0678  1283               	bcf	3,5	;RP0=0, select bank0
   478     0679  1303               	bcf	3,6	;RP1=0, select bank0
   479     067A  00BC               	movwf	main@value
   480     067B                     l940:
   481                           
   482                           ;main.c: 108:     for(int i=0;i<strlen(value);i++){
   483     067B  01B8               	clrf	main@i
   484     067C  01B9               	clrf	main@i+1
   485     067D  2E93               	goto	l946
   486     067E                     l942:
   487                           
   488                           ;main.c: 109:         lcd_data(value[i]);
   489     067E  0838               	movf	main@i,w
   490     067F  073C               	addwf	main@value,w
   491     0680  0084               	movwf	4
   492     0681  120A  118A  2003  120A  118A  	fcall	stringdir
   493     0686  120A  118A  256D  120A  118A  	fcall	_lcd_data
   494     068B                     l944:
   495                           
   496                           ;main.c: 110:     }
   497     068B  3001               	movlw	1
   498     068C  1283               	bcf	3,5	;RP0=0, select bank0
   499     068D  1303               	bcf	3,6	;RP1=0, select bank0
   500     068E  07B8               	addwf	main@i,f
   501     068F  1803               	skipnc
   502     0690  0AB9               	incf	main@i+1,f
   503     0691  3000               	movlw	0
   504     0692  07B9               	addwf	main@i+1,f
   505     0693                     l946:
   506     0693  083C               	movf	main@value,w
   507     0694  00F0               	movwf	strlen@s
   508     0695  120A  118A  253C  120A  118A  	fcall	_strlen
   509     069A  0871               	movf	?_strlen+1,w
   510     069B  1283               	bcf	3,5	;RP0=0, select bank0
   511     069C  1303               	bcf	3,6	;RP1=0, select bank0
   512     069D  0239               	subwf	main@i+1,w
   513     069E  1D03               	skipz
   514     069F  2EA2               	goto	u375
   515     06A0  0870               	movf	?_strlen,w
   516     06A1  0238               	subwf	main@i,w
   517     06A2                     u375:
   518     06A2  1C03               	skipc
   519     06A3  2EA5               	goto	u371
   520     06A4  2EA6               	goto	u370
   521     06A5                     u371:
   522     06A5  2E7E               	goto	l942
   523     06A6                     u370:
   524     06A6                     l948:
   525                           
   526                           ;main.c: 113:         WriteByteToEE(0,0x00);
   527     06A6  01F0               	clrf	WriteByteToEE@address
   528     06A7  3000               	movlw	0
   529     06A8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   530                           
   531                           ;main.c: 114:         WriteByteToEE(1,0x01);
   532     06AD  01F0               	clrf	WriteByteToEE@address
   533     06AE  0AF0               	incf	WriteByteToEE@address,f
   534     06AF  3001               	movlw	1
   535     06B0  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   536                           
   537                           ;main.c: 115:         WriteByteToEE(4,0x02);
   538     06B5  3002               	movlw	2
   539     06B6  00F0               	movwf	WriteByteToEE@address
   540     06B7  3004               	movlw	4
   541     06B8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   542                           
   543                           ;main.c: 116:         WriteByteToEE(9,0x03);
   544     06BD  3003               	movlw	3
   545     06BE  00F0               	movwf	WriteByteToEE@address
   546     06BF  3009               	movlw	9
   547     06C0  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   548                           
   549                           ;main.c: 117:         WriteByteToEE(16,0x04);
   550     06C5  3004               	movlw	4
   551     06C6  00F0               	movwf	WriteByteToEE@address
   552     06C7  3010               	movlw	16
   553     06C8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   554                           
   555                           ;main.c: 118:         WriteByteToEE(25,0x05);
   556     06CD  3005               	movlw	5
   557     06CE  00F0               	movwf	WriteByteToEE@address
   558     06CF  3019               	movlw	25
   559     06D0  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   560                           
   561                           ;main.c: 119:         WriteByteToEE(36,0x06);
   562     06D5  3006               	movlw	6
   563     06D6  00F0               	movwf	WriteByteToEE@address
   564     06D7  3024               	movlw	36
   565     06D8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   566                           
   567                           ;main.c: 120:         WriteByteToEE(49,0x07);
   568     06DD  3007               	movlw	7
   569     06DE  00F0               	movwf	WriteByteToEE@address
   570     06DF  3031               	movlw	49
   571     06E0  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   572                           
   573                           ;main.c: 121:         WriteByteToEE(64,0x08);
   574     06E5  3008               	movlw	8
   575     06E6  00F0               	movwf	WriteByteToEE@address
   576     06E7  3040               	movlw	64
   577     06E8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   578                           
   579                           ;main.c: 122:         WriteByteToEE(81,0x09);
   580     06ED  3009               	movlw	9
   581     06EE  00F0               	movwf	WriteByteToEE@address
   582     06EF  3051               	movlw	81
   583     06F0  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   584                           
   585                           ;main.c: 123:         WriteByteToEE(100,0x0A);
   586     06F5  300A               	movlw	10
   587     06F6  00F0               	movwf	WriteByteToEE@address
   588     06F7  3064               	movlw	100
   589     06F8  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   590                           
   591                           ;main.c: 124:         WriteByteToEE(121,0x0B);
   592     06FD  300B               	movlw	11
   593     06FE  00F0               	movwf	WriteByteToEE@address
   594     06FF  3079               	movlw	121
   595     0700  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   596                           
   597                           ;main.c: 125:         WriteByteToEE(144,0x0C);
   598     0705  300C               	movlw	12
   599     0706  00F0               	movwf	WriteByteToEE@address
   600     0707  3090               	movlw	144
   601     0708  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   602                           
   603                           ;main.c: 126:         WriteByteToEE(169,0x0D);
   604     070D  300D               	movlw	13
   605     070E  00F0               	movwf	WriteByteToEE@address
   606     070F  30A9               	movlw	169
   607     0710  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   608                           
   609                           ;main.c: 127:         WriteByteToEE(196,0x0E);
   610     0715  300E               	movlw	14
   611     0716  00F0               	movwf	WriteByteToEE@address
   612     0717  30C4               	movlw	196
   613     0718  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   614                           
   615                           ;main.c: 128:         WriteByteToEE(225,0x0F);
   616     071D  300F               	movlw	15
   617     071E  00F0               	movwf	WriteByteToEE@address
   618     071F  30E1               	movlw	225
   619     0720  120A  118A  2554  120A  118A  	fcall	_WriteByteToEE
   620     0725                     l950:
   621                           
   622                           ;main.c: 130:         for (int i=0;i<16;i++){
   623     0725  1283               	bcf	3,5	;RP0=0, select bank0
   624     0726  1303               	bcf	3,6	;RP1=0, select bank0
   625     0727  01BD               	clrf	main@i_94
   626     0728  01BE               	clrf	main@i_94+1
   627     0729                     l956:
   628                           
   629                           ;main.c: 131:             ReadByteFromEE(i);
   630     0729  1283               	bcf	3,5	;RP0=0, select bank0
   631     072A  1303               	bcf	3,6	;RP1=0, select bank0
   632     072B  083D               	movf	main@i_94,w
   633     072C  120A  118A  2526  120A  118A  	fcall	_ReadByteFromEE
   634     0731                     l958:
   635                           
   636                           ;main.c: 132:             _delay((unsigned long)((200)*(6000000/4000.0)));
   637     0731  3002               	movlw	2
   638     0732  00F9               	movwf	??_main+2
   639     0733  3086               	movlw	134
   640     0734  00F8               	movwf	??_main+1
   641     0735  3099               	movlw	153
   642     0736  00F7               	movwf	??_main
   643     0737                     u427:
   644     0737  0BF7               	decfsz	??_main,f
   645     0738  2F37               	goto	u427
   646     0739  0BF8               	decfsz	??_main+1,f
   647     073A  2F37               	goto	u427
   648     073B  0BF9               	decfsz	??_main+2,f
   649     073C  2F37               	goto	u427
   650     073D                     l960:
   651                           
   652                           ;main.c: 133:             int count=0;
   653     073D  1283               	bcf	3,5	;RP0=0, select bank0
   654     073E  1303               	bcf	3,6	;RP1=0, select bank0
   655     073F  01BA               	clrf	main@count
   656     0740  01BB               	clrf	main@count+1
   657     0741                     l962:
   658                           
   659                           ;main.c: 134:             lcd_command(0xC0);
   660     0741  30C0               	movlw	192
   661     0742  120A  118A  2589  120A  118A  	fcall	_lcd_command
   662     0747                     l964:
   663                           
   664                           ;main.c: 135:             lcd_data(32);
   665     0747  3020               	movlw	32
   666     0748  120A  118A  256D  120A  118A  	fcall	_lcd_data
   667     074D                     l966:
   668                           
   669                           ;main.c: 136:             lcd_data(32);
   670     074D  3020               	movlw	32
   671     074E  120A  118A  256D  120A  118A  	fcall	_lcd_data
   672     0753                     l968:
   673                           
   674                           ;main.c: 137:             lcd_data(32);
   675     0753  3020               	movlw	32
   676     0754  120A  118A  256D  120A  118A  	fcall	_lcd_data
   677     0759                     l970:
   678                           
   679                           ;main.c: 138:             lcd_data(32);
   680     0759  3020               	movlw	32
   681     075A  120A  118A  256D  120A  118A  	fcall	_lcd_data
   682     075F                     l972:
   683                           
   684                           ;main.c: 140:             lcd_command(0xC0);
   685     075F  30C0               	movlw	192
   686     0760  120A  118A  2589  120A  118A  	fcall	_lcd_command
   687     0765                     l974:
   688                           
   689                           ;main.c: 142:             if(byte<10){
   690     0765  3000               	movlw	0
   691     0766  1283               	bcf	3,5	;RP0=0, select bank0
   692     0767  1303               	bcf	3,6	;RP1=0, select bank0
   693     0768  0235               	subwf	_byte+1,w
   694     0769  300A               	movlw	10
   695     076A  1903               	skipnz
   696     076B  0234               	subwf	_byte,w
   697     076C  1803               	skipnc
   698     076D  2F6F               	goto	u381
   699     076E  2F70               	goto	u380
   700     076F                     u381:
   701     076F  2FAF               	goto	l984
   702     0770                     u380:
   703     0770                     l976:
   704                           
   705                           ;main.c: 143:                 lcd_data(byte+0x30);
   706     0770  0834               	movf	_byte,w
   707     0771  3E30               	addlw	48
   708     0772  120A  118A  256D  120A  118A  	fcall	_lcd_data
   709                           
   710                           ;main.c: 145:             }
   711     0777  2FD8               	goto	l998
   712     0778                     l978:
   713                           
   714                           ;main.c: 148:                     int rem=byte%10;
   715     0778  300A               	movlw	10
   716     0779  00F0               	movwf	___lwmod@divisor
   717     077A  3000               	movlw	0
   718     077B  00F1               	movwf	___lwmod@divisor+1
   719     077C  0835               	movf	_byte+1,w
   720     077D  00F3               	movwf	___lwmod@dividend+1
   721     077E  0834               	movf	_byte,w
   722     077F  00F2               	movwf	___lwmod@dividend
   723     0780  120A  118A  25A6  120A  118A  	fcall	___lwmod
   724     0785  0871               	movf	?___lwmod+1,w
   725     0786  1283               	bcf	3,5	;RP0=0, select bank0
   726     0787  1303               	bcf	3,6	;RP1=0, select bank0
   727     0788  00B7               	movwf	main@rem+1
   728     0789  0870               	movf	?___lwmod,w
   729     078A  00B6               	movwf	main@rem
   730                           
   731                           ;main.c: 149:                     byte=byte/10;
   732     078B  300A               	movlw	10
   733     078C  00F0               	movwf	___lwdiv@divisor
   734     078D  3000               	movlw	0
   735     078E  00F1               	movwf	___lwdiv@divisor+1
   736     078F  0835               	movf	_byte+1,w
   737     0790  00F3               	movwf	___lwdiv@dividend+1
   738     0791  0834               	movf	_byte,w
   739     0792  00F2               	movwf	___lwdiv@dividend
   740     0793  120A  118A  25DE  120A  118A  	fcall	___lwdiv
   741     0798  0871               	movf	?___lwdiv+1,w
   742     0799  1283               	bcf	3,5	;RP0=0, select bank0
   743     079A  1303               	bcf	3,6	;RP1=0, select bank0
   744     079B  00B5               	movwf	_byte+1
   745     079C  0870               	movf	?___lwdiv,w
   746     079D  00B4               	movwf	_byte
   747     079E                     l980:
   748                           
   749                           ;main.c: 150:                     arr1[count]=rem;
   750     079E  083A               	movf	main@count,w
   751     079F  00F7               	movwf	??_main
   752     07A0  0777               	addwf	??_main,w
   753     07A1  3E20               	addlw	(low (_arr1| 0))& (0+255)
   754     07A2  0084               	movwf	4
   755     07A3  0836               	movf	main@rem,w
   756     07A4  1383               	bcf	3,7	;select IRP bank0
   757     07A5  0080               	movwf	0
   758     07A6  0A84               	incf	4,f
   759     07A7  0837               	movf	main@rem+1,w
   760     07A8  0080               	movwf	0
   761     07A9                     l982:
   762                           
   763                           ;main.c: 151:                     count++;
   764     07A9  3001               	movlw	1
   765     07AA  07BA               	addwf	main@count,f
   766     07AB  1803               	skipnc
   767     07AC  0ABB               	incf	main@count+1,f
   768     07AD  3000               	movlw	0
   769     07AE  07BB               	addwf	main@count+1,f
   770     07AF                     l984:
   771                           
   772                           ;main.c: 147:                 while(byte>0){
   773     07AF  0834               	movf	_byte,w
   774     07B0  0435               	iorwf	_byte+1,w
   775     07B1  1D03               	btfss	3,2
   776     07B2  2FB4               	goto	u391
   777     07B3  2FB5               	goto	u390
   778     07B4                     u391:
   779     07B4  2F78               	goto	l978
   780     07B5                     u390:
   781     07B5                     l986:
   782                           
   783                           ;main.c: 154:                 for(int j=count-1;j>=0;j--){
   784     07B5  083A               	movf	main@count,w
   785     07B6  3EFF               	addlw	255
   786     07B7  00BF               	movwf	main@j
   787     07B8  083B               	movf	main@count+1,w
   788     07B9  1803               	skipnc
   789     07BA  3E01               	addlw	1
   790     07BB  3EFF               	addlw	255
   791     07BC  00C0               	movwf	main@j+1
   792     07BD                     l988:
   793     07BD  1FC0               	btfss	main@j+1,7
   794     07BE  2FC0               	goto	u401
   795     07BF  2FC1               	goto	u400
   796     07C0                     u401:
   797     07C0  2FC2               	goto	l992
   798     07C1                     u400:
   799     07C1  2FD8               	goto	l998
   800     07C2                     l992:
   801                           
   802                           ;main.c: 156:                     lcd_data(arr1[j] + 0x30);
   803     07C2  083F               	movf	main@j,w
   804     07C3  00F7               	movwf	??_main
   805     07C4  0777               	addwf	??_main,w
   806     07C5  3E20               	addlw	(low (_arr1| 0))& (0+255)
   807     07C6  0084               	movwf	4
   808     07C7  1383               	bcf	3,7	;select IRP bank0
   809     07C8  0800               	movf	0,w
   810     07C9  3E30               	addlw	48
   811     07CA  120A  118A  256D  120A  118A  	fcall	_lcd_data
   812     07CF                     l994:
   813                           
   814                           ;main.c: 157:                 }
   815     07CF  30FF               	movlw	255
   816     07D0  1283               	bcf	3,5	;RP0=0, select bank0
   817     07D1  1303               	bcf	3,6	;RP1=0, select bank0
   818     07D2  07BF               	addwf	main@j,f
   819     07D3  1803               	skipnc
   820     07D4  0AC0               	incf	main@j+1,f
   821     07D5  30FF               	movlw	255
   822     07D6  07C0               	addwf	main@j+1,f
   823     07D7  2FBD               	goto	l988
   824     07D8                     l998:
   825                           
   826                           ;main.c: 161:         }
   827     07D8  3001               	movlw	1
   828     07D9  1283               	bcf	3,5	;RP0=0, select bank0
   829     07DA  1303               	bcf	3,6	;RP1=0, select bank0
   830     07DB  07BD               	addwf	main@i_94,f
   831     07DC  1803               	skipnc
   832     07DD  0ABE               	incf	main@i_94+1,f
   833     07DE  3000               	movlw	0
   834     07DF  07BE               	addwf	main@i_94+1,f
   835     07E0                     l1000:
   836     07E0  083E               	movf	main@i_94+1,w
   837     07E1  3A80               	xorlw	128
   838     07E2  00FF               	movwf	btemp+1
   839     07E3  3080               	movlw	128
   840     07E4  027F               	subwf	btemp+1,w
   841     07E5  1D03               	skipz
   842     07E6  2FE9               	goto	u415
   843     07E7  3010               	movlw	16
   844     07E8  023D               	subwf	main@i_94,w
   845     07E9                     u415:
   846     07E9  1C03               	skipc
   847     07EA  2FEC               	goto	u411
   848     07EB  2FED               	goto	u410
   849     07EC                     u411:
   850     07EC  2F29               	goto	l956
   851     07ED                     u410:
   852     07ED  2F25               	goto	l950
   853     07EE  120A  118A  2800   	ljmp	start
   854     07F1                     __end_of_main:
   855                           
   856                           	psect	text1
   857     053C                     __ptext1:	
   858 ;; *************** function _strlen *****************
   859 ;; Defined at:
   860 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\strlen.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  s               1    0[COMMON] PTR const unsigned char 
   863 ;;		 -> STR_1(14), 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  a               1    2[COMMON] PTR const unsigned char 
   866 ;;		 -> STR_1(14), 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  2    0[COMMON] unsigned int 
   869 ;; Registers used:
   870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   876 ;;      Params:         2       0       0       0       0
   877 ;;      Locals:         1       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0
   879 ;;      Totals:         3       0       0       0       0
   880 ;;Total ram usage:        3 bytes
   881 ;; Hardware stack levels used: 2
   882 ;; This function calls:
   883 ;;		Nothing
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     053C                     _strlen:	
   890                           ;psect for function _strlen
   891                           
   892     053C                     l878:	
   893                           ;incstack = 0
   894                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   895                           
   896     053C  0870               	movf	strlen@s,w
   897     053D  00F2               	movwf	strlen@a
   898     053E  2D41               	goto	l882
   899     053F                     l880:
   900     053F  3001               	movlw	1
   901     0540  07F0               	addwf	strlen@s,f
   902     0541                     l882:
   903     0541  0870               	movf	strlen@s,w
   904     0542  0084               	movwf	4
   905     0543  120A  118A  2003  120A  118A  	fcall	stringdir
   906     0548  3A00               	xorlw	0
   907     0549  1D03               	skipz
   908     054A  2D4C               	goto	u231
   909     054B  2D4D               	goto	u230
   910     054C                     u231:
   911     054C  2D3F               	goto	l880
   912     054D                     u230:
   913     054D                     l884:
   914     054D  0872               	movf	strlen@a,w
   915     054E  0270               	subwf	strlen@s,w
   916     054F  00F0               	movwf	?_strlen
   917     0550  01F1               	clrf	?_strlen+1
   918     0551  1BF0               	btfsc	?_strlen,7
   919     0552  03F1               	decf	?_strlen+1,f
   920     0553                     l624:
   921     0553  0008               	return
   922     0554                     __end_of_strlen:
   923                           
   924                           	psect	text2
   925     056D                     __ptext2:	
   926 ;; *************** function _lcd_data *****************
   927 ;; Defined at:
   928 ;;		line 59 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;  data            1    wreg     unsigned char 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  data            1    2[COMMON] unsigned char 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       0       0       0       0
   943 ;;      Locals:         1       0       0       0       0
   944 ;;      Temps:          2       0       0       0       0
   945 ;;      Totals:         3       0       0       0       0
   946 ;;Total ram usage:        3 bytes
   947 ;; Hardware stack levels used: 1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955     056D                     _lcd_data:	
   956                           ;psect for function _lcd_data
   957                           
   958                           
   959                           ;incstack = 0
   960                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   961                           ;lcd_data@data stored from wreg
   962     056D  00F2               	movwf	lcd_data@data
   963     056E                     l848:
   964                           
   965                           ;main.c: 60:     PORTC |= 0x08;
   966     056E  1283               	bcf	3,5	;RP0=0, select bank0
   967     056F  1303               	bcf	3,6	;RP1=0, select bank0
   968     0570  1587               	bsf	7,3	;volatile
   969     0571                     l850:
   970                           
   971                           ;main.c: 61:     PORTD = data;
   972     0571  0872               	movf	lcd_data@data,w
   973     0572  0088               	movwf	8	;volatile
   974     0573                     l852:
   975                           
   976                           ;main.c: 62:     PORTC |= 0x01;
   977     0573  1407               	bsf	7,0	;volatile
   978                           
   979                           ;main.c: 63:     _delay((unsigned long)((1)*(6000000/4000.0)));
   980     0574  30D6               	movlw	214
   981     0575  00F0               	movwf	??_lcd_data
   982     0576                     u437:
   983     0576  2D77               	nop2
   984     0577  2D78               	nop2
   985     0578  0BF0               	decfsz	??_lcd_data,f
   986     0579  2D76               	goto	u437
   987     057A  0000               	nop
   988     057B                     l854:
   989                           
   990                           ;main.c: 64:     PORTC &= ~0x01;
   991     057B  30FE               	movlw	254
   992     057C  1283               	bcf	3,5	;RP0=0, select bank0
   993     057D  1303               	bcf	3,6	;RP1=0, select bank0
   994     057E  0587               	andwf	7,f	;volatile
   995     057F                     l856:
   996                           
   997                           ;main.c: 65:     _delay((unsigned long)((2)*(6000000/4000.0)));
   998     057F  3004               	movlw	4
   999     0580  00F1               	movwf	??_lcd_data+1
  1000     0581  30E4               	movlw	228
  1001     0582  00F0               	movwf	??_lcd_data
  1002     0583                     u447:
  1003     0583  0BF0               	decfsz	??_lcd_data,f
  1004     0584  2D83               	goto	u447
  1005     0585  0BF1               	decfsz	??_lcd_data+1,f
  1006     0586  2D83               	goto	u447
  1007     0587  0000               	nop
  1008     0588                     l41:
  1009     0588  0008               	return
  1010     0589                     __end_of_lcd_data:
  1011                           
  1012                           	psect	text3
  1013     0620                     __ptext3:	
  1014 ;; *************** function _initLCD *****************
  1015 ;; Defined at:
  1016 ;;		line 40 in file "main.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;		None
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;		None
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  1    wreg      void 
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0, pclath, cstack
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1030 ;;      Params:         0       0       0       0       0
  1031 ;;      Locals:         0       0       0       0       0
  1032 ;;      Temps:          2       0       0       0       0
  1033 ;;      Totals:         2       0       0       0       0
  1034 ;;Total ram usage:        2 bytes
  1035 ;; Hardware stack levels used: 1
  1036 ;; Hardware stack levels required when called: 1
  1037 ;; This function calls:
  1038 ;;		_lcd_command
  1039 ;; This function is called by:
  1040 ;;		_main
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044     0620                     _initLCD:	
  1045                           ;psect for function _initLCD
  1046                           
  1047     0620                     l826:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  1050                           
  1051                           
  1052                           ;main.c: 43:     TRISC = 0x00;
  1053     0620  1683               	bsf	3,5	;RP0=1, select bank1
  1054     0621  1303               	bcf	3,6	;RP1=0, select bank1
  1055     0622  0187               	clrf	7	;volatile
  1056                           
  1057                           ;main.c: 44:     TRISD = 0x00;
  1058     0623  0188               	clrf	8	;volatile
  1059                           
  1060                           ;main.c: 45:     PORTD=0x00;
  1061     0624  1283               	bcf	3,5	;RP0=0, select bank0
  1062     0625  1303               	bcf	3,6	;RP1=0, select bank0
  1063     0626  0188               	clrf	8	;volatile
  1064     0627                     l828:
  1065                           
  1066                           ;main.c: 46:     TRISB =0xF0;
  1067     0627  30F0               	movlw	240
  1068     0628  1683               	bsf	3,5	;RP0=1, select bank1
  1069     0629  1303               	bcf	3,6	;RP1=0, select bank1
  1070     062A  0086               	movwf	6	;volatile
  1071     062B                     l830:
  1072                           
  1073                           ;main.c: 47:     PORTB=0xF0;
  1074     062B  30F0               	movlw	240
  1075     062C  1283               	bcf	3,5	;RP0=0, select bank0
  1076     062D  1303               	bcf	3,6	;RP1=0, select bank0
  1077     062E  0086               	movwf	6	;volatile
  1078     062F                     l832:
  1079                           
  1080                           ;main.c: 49:     lcd_command(0x38);
  1081     062F  3038               	movlw	56
  1082     0630  120A  118A  2589  120A  118A  	fcall	_lcd_command
  1083     0635                     l834:
  1084                           
  1085                           ;main.c: 50:     _delay((unsigned long)((5)*(6000000/4000.0)));
  1086     0635  300A               	movlw	10
  1087     0636  00F4               	movwf	??_initLCD+1
  1088     0637  30BC               	movlw	188
  1089     0638  00F3               	movwf	??_initLCD
  1090     0639                     u457:
  1091     0639  0BF3               	decfsz	??_initLCD,f
  1092     063A  2E39               	goto	u457
  1093     063B  0BF4               	decfsz	??_initLCD+1,f
  1094     063C  2E39               	goto	u457
  1095     063D  0000               	nop
  1096     063E                     l836:
  1097                           
  1098                           ;main.c: 51:     lcd_command(0x0C);
  1099     063E  300C               	movlw	12
  1100     063F  120A  118A  2589  120A  118A  	fcall	_lcd_command
  1101     0644                     l838:
  1102                           
  1103                           ;main.c: 52:     _delay((unsigned long)((5)*(6000000/4000.0)));
  1104     0644  300A               	movlw	10
  1105     0645  00F4               	movwf	??_initLCD+1
  1106     0646  30BC               	movlw	188
  1107     0647  00F3               	movwf	??_initLCD
  1108     0648                     u467:
  1109     0648  0BF3               	decfsz	??_initLCD,f
  1110     0649  2E48               	goto	u467
  1111     064A  0BF4               	decfsz	??_initLCD+1,f
  1112     064B  2E48               	goto	u467
  1113     064C  0000               	nop
  1114     064D                     l840:
  1115                           
  1116                           ;main.c: 53:     lcd_command(0x06);
  1117     064D  3006               	movlw	6
  1118     064E  120A  118A  2589  120A  118A  	fcall	_lcd_command
  1119     0653                     l842:
  1120                           
  1121                           ;main.c: 54:     _delay((unsigned long)((5)*(6000000/4000.0)));
  1122     0653  300A               	movlw	10
  1123     0654  00F4               	movwf	??_initLCD+1
  1124     0655  30BC               	movlw	188
  1125     0656  00F3               	movwf	??_initLCD
  1126     0657                     u477:
  1127     0657  0BF3               	decfsz	??_initLCD,f
  1128     0658  2E57               	goto	u477
  1129     0659  0BF4               	decfsz	??_initLCD+1,f
  1130     065A  2E57               	goto	u477
  1131     065B  0000               	nop
  1132     065C                     l844:
  1133                           
  1134                           ;main.c: 55:     lcd_command(0x01);
  1135     065C  3001               	movlw	1
  1136     065D  120A  118A  2589  120A  118A  	fcall	_lcd_command
  1137     0662                     l846:
  1138                           
  1139                           ;main.c: 56:     _delay((unsigned long)((5)*(6000000/4000.0)));
  1140     0662  300A               	movlw	10
  1141     0663  00F4               	movwf	??_initLCD+1
  1142     0664  30BC               	movlw	188
  1143     0665  00F3               	movwf	??_initLCD
  1144     0666                     u487:
  1145     0666  0BF3               	decfsz	??_initLCD,f
  1146     0667  2E66               	goto	u487
  1147     0668  0BF4               	decfsz	??_initLCD+1,f
  1148     0669  2E66               	goto	u487
  1149     066A  0000               	nop
  1150     066B                     l38:
  1151     066B  0008               	return
  1152     066C                     __end_of_initLCD:
  1153                           
  1154                           	psect	text4
  1155     0589                     __ptext4:	
  1156 ;; *************** function _lcd_command *****************
  1157 ;; Defined at:
  1158 ;;		line 29 in file "main.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  cmd             1    wreg     unsigned char 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  cmd             1    2[COMMON] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         0       0       0       0       0
  1173 ;;      Locals:         1       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0
  1175 ;;      Totals:         3       0       0       0       0
  1176 ;;Total ram usage:        3 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_initLCD
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186     0589                     _lcd_command:	
  1187                           ;psect for function _lcd_command
  1188                           
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _lcd_command: [wreg+status,2+status,0]
  1192                           ;lcd_command@cmd stored from wreg
  1193     0589  00F2               	movwf	lcd_command@cmd
  1194     058A                     l816:
  1195                           
  1196                           ;main.c: 30:     PORTC &= ~0x08;
  1197     058A  30F7               	movlw	247
  1198     058B  1283               	bcf	3,5	;RP0=0, select bank0
  1199     058C  1303               	bcf	3,6	;RP1=0, select bank0
  1200     058D  0587               	andwf	7,f	;volatile
  1201     058E                     l818:
  1202                           
  1203                           ;main.c: 31:     PORTD = cmd;
  1204     058E  0872               	movf	lcd_command@cmd,w
  1205     058F  0088               	movwf	8	;volatile
  1206     0590                     l820:
  1207                           
  1208                           ;main.c: 32:     PORTC |= 0x01;
  1209     0590  1407               	bsf	7,0	;volatile
  1210     0591                     l822:
  1211                           
  1212                           ;main.c: 33:     _delay((unsigned long)((1)*(6000000/4000.0)));
  1213     0591  30D6               	movlw	214
  1214     0592  00F0               	movwf	??_lcd_command
  1215     0593                     u497:
  1216     0593  2D94               	nop2
  1217     0594  2D95               	nop2
  1218     0595  0BF0               	decfsz	??_lcd_command,f
  1219     0596  2D93               	goto	u497
  1220     0597  0000               	nop
  1221                           
  1222                           ;main.c: 34:     PORTC &= ~0x01;
  1223     0598  30FE               	movlw	254
  1224     0599  1283               	bcf	3,5	;RP0=0, select bank0
  1225     059A  1303               	bcf	3,6	;RP1=0, select bank0
  1226     059B  0587               	andwf	7,f	;volatile
  1227     059C                     l824:
  1228                           
  1229                           ;main.c: 35:     _delay((unsigned long)((2)*(6000000/4000.0)));
  1230     059C  3004               	movlw	4
  1231     059D  00F1               	movwf	??_lcd_command+1
  1232     059E  30E4               	movlw	228
  1233     059F  00F0               	movwf	??_lcd_command
  1234     05A0                     u507:
  1235     05A0  0BF0               	decfsz	??_lcd_command,f
  1236     05A1  2DA0               	goto	u507
  1237     05A2  0BF1               	decfsz	??_lcd_command+1,f
  1238     05A3  2DA0               	goto	u507
  1239     05A4  0000               	nop
  1240     05A5                     l35:
  1241     05A5  0008               	return
  1242     05A6                     __end_of_lcd_command:
  1243                           
  1244                           	psect	text5
  1245     05A6                     __ptext5:	
  1246 ;; *************** function ___lwmod *****************
  1247 ;; Defined at:
  1248 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  divisor         2    0[COMMON] unsigned int 
  1251 ;;  dividend        2    2[COMMON] unsigned int 
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  counter         1    4[COMMON] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  2    0[COMMON] unsigned int 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1263 ;;      Params:         4       0       0       0       0
  1264 ;;      Locals:         1       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0
  1266 ;;      Totals:         5       0       0       0       0
  1267 ;;Total ram usage:        5 bytes
  1268 ;; Hardware stack levels used: 1
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_main
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276     05A6                     ___lwmod:	
  1277                           ;psect for function ___lwmod
  1278                           
  1279     05A6                     l914:	
  1280                           ;incstack = 0
  1281                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1282                           
  1283     05A6  0870               	movf	___lwmod@divisor,w
  1284     05A7  0471               	iorwf	___lwmod@divisor+1,w
  1285     05A8  1903               	btfsc	3,2
  1286     05A9  2DAB               	goto	u311
  1287     05AA  2DAC               	goto	u310
  1288     05AB                     u311:
  1289     05AB  2DD9               	goto	l932
  1290     05AC                     u310:
  1291     05AC                     l916:
  1292     05AC  3001               	movlw	1
  1293     05AD  00F4               	movwf	___lwmod@counter
  1294     05AE  2DB8               	goto	l922
  1295     05AF                     l918:
  1296     05AF  3001               	movlw	1
  1297     05B0                     u325:
  1298     05B0  1003               	clrc
  1299     05B1  0DF0               	rlf	___lwmod@divisor,f
  1300     05B2  0DF1               	rlf	___lwmod@divisor+1,f
  1301     05B3  3EFF               	addlw	-1
  1302     05B4  1D03               	skipz
  1303     05B5  2DB0               	goto	u325
  1304     05B6                     l920:
  1305     05B6  3001               	movlw	1
  1306     05B7  07F4               	addwf	___lwmod@counter,f
  1307     05B8                     l922:
  1308     05B8  1FF1               	btfss	___lwmod@divisor+1,7
  1309     05B9  2DBB               	goto	u331
  1310     05BA  2DBC               	goto	u330
  1311     05BB                     u331:
  1312     05BB  2DAF               	goto	l918
  1313     05BC                     u330:
  1314     05BC                     l924:
  1315     05BC  0871               	movf	___lwmod@divisor+1,w
  1316     05BD  0273               	subwf	___lwmod@dividend+1,w
  1317     05BE  1D03               	skipz
  1318     05BF  2DC2               	goto	u345
  1319     05C0  0870               	movf	___lwmod@divisor,w
  1320     05C1  0272               	subwf	___lwmod@dividend,w
  1321     05C2                     u345:
  1322     05C2  1C03               	skipc
  1323     05C3  2DC5               	goto	u341
  1324     05C4  2DC6               	goto	u340
  1325     05C5                     u341:
  1326     05C5  2DCC               	goto	l928
  1327     05C6                     u340:
  1328     05C6                     l926:
  1329     05C6  0870               	movf	___lwmod@divisor,w
  1330     05C7  02F2               	subwf	___lwmod@dividend,f
  1331     05C8  0871               	movf	___lwmod@divisor+1,w
  1332     05C9  1C03               	skipc
  1333     05CA  03F3               	decf	___lwmod@dividend+1,f
  1334     05CB  02F3               	subwf	___lwmod@dividend+1,f
  1335     05CC                     l928:
  1336     05CC  3001               	movlw	1
  1337     05CD                     u355:
  1338     05CD  1003               	clrc
  1339     05CE  0CF1               	rrf	___lwmod@divisor+1,f
  1340     05CF  0CF0               	rrf	___lwmod@divisor,f
  1341     05D0  3EFF               	addlw	-1
  1342     05D1  1D03               	skipz
  1343     05D2  2DCD               	goto	u355
  1344     05D3                     l930:
  1345     05D3  3001               	movlw	1
  1346     05D4  02F4               	subwf	___lwmod@counter,f
  1347     05D5  1D03               	btfss	3,2
  1348     05D6  2DD8               	goto	u361
  1349     05D7  2DD9               	goto	u360
  1350     05D8                     u361:
  1351     05D8  2DBC               	goto	l924
  1352     05D9                     u360:
  1353     05D9                     l932:
  1354     05D9  0873               	movf	___lwmod@dividend+1,w
  1355     05DA  00F1               	movwf	?___lwmod+1
  1356     05DB  0872               	movf	___lwmod@dividend,w
  1357     05DC  00F0               	movwf	?___lwmod
  1358     05DD                     l452:
  1359     05DD  0008               	return
  1360     05DE                     __end_of___lwmod:
  1361                           
  1362                           	psect	text6
  1363     05DE                     __ptext6:	
  1364 ;; *************** function ___lwdiv *****************
  1365 ;; Defined at:
  1366 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  divisor         2    0[COMMON] unsigned int 
  1369 ;;  dividend        2    2[COMMON] unsigned int 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  quotient        2    4[COMMON] unsigned int 
  1372 ;;  counter         1    6[COMMON] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2    0[COMMON] unsigned int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         4       0       0       0       0
  1383 ;;      Locals:         3       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0
  1385 ;;      Totals:         7       0       0       0       0
  1386 ;;Total ram usage:        7 bytes
  1387 ;; Hardware stack levels used: 1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395     05DE                     ___lwdiv:	
  1396                           ;psect for function ___lwdiv
  1397                           
  1398     05DE                     l888:	
  1399                           ;incstack = 0
  1400                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1401                           
  1402     05DE  01F4               	clrf	___lwdiv@quotient
  1403     05DF  01F5               	clrf	___lwdiv@quotient+1
  1404     05E0                     l890:
  1405     05E0  0870               	movf	___lwdiv@divisor,w
  1406     05E1  0471               	iorwf	___lwdiv@divisor+1,w
  1407     05E2  1903               	btfsc	3,2
  1408     05E3  2DE5               	goto	u241
  1409     05E4  2DE6               	goto	u240
  1410     05E5                     u241:
  1411     05E5  2E1B               	goto	l910
  1412     05E6                     u240:
  1413     05E6                     l892:
  1414     05E6  3001               	movlw	1
  1415     05E7  00F6               	movwf	___lwdiv@counter
  1416     05E8  2DF2               	goto	l898
  1417     05E9                     l894:
  1418     05E9  3001               	movlw	1
  1419     05EA                     u255:
  1420     05EA  1003               	clrc
  1421     05EB  0DF0               	rlf	___lwdiv@divisor,f
  1422     05EC  0DF1               	rlf	___lwdiv@divisor+1,f
  1423     05ED  3EFF               	addlw	-1
  1424     05EE  1D03               	skipz
  1425     05EF  2DEA               	goto	u255
  1426     05F0                     l896:
  1427     05F0  3001               	movlw	1
  1428     05F1  07F6               	addwf	___lwdiv@counter,f
  1429     05F2                     l898:
  1430     05F2  1FF1               	btfss	___lwdiv@divisor+1,7
  1431     05F3  2DF5               	goto	u261
  1432     05F4  2DF6               	goto	u260
  1433     05F5                     u261:
  1434     05F5  2DE9               	goto	l894
  1435     05F6                     u260:
  1436     05F6                     l900:
  1437     05F6  3001               	movlw	1
  1438     05F7                     u275:
  1439     05F7  1003               	clrc
  1440     05F8  0DF4               	rlf	___lwdiv@quotient,f
  1441     05F9  0DF5               	rlf	___lwdiv@quotient+1,f
  1442     05FA  3EFF               	addlw	-1
  1443     05FB  1D03               	skipz
  1444     05FC  2DF7               	goto	u275
  1445     05FD  0871               	movf	___lwdiv@divisor+1,w
  1446     05FE  0273               	subwf	___lwdiv@dividend+1,w
  1447     05FF  1D03               	skipz
  1448     0600  2E03               	goto	u285
  1449     0601  0870               	movf	___lwdiv@divisor,w
  1450     0602  0272               	subwf	___lwdiv@dividend,w
  1451     0603                     u285:
  1452     0603  1C03               	skipc
  1453     0604  2E06               	goto	u281
  1454     0605  2E07               	goto	u280
  1455     0606                     u281:
  1456     0606  2E0E               	goto	l906
  1457     0607                     u280:
  1458     0607                     l902:
  1459     0607  0870               	movf	___lwdiv@divisor,w
  1460     0608  02F2               	subwf	___lwdiv@dividend,f
  1461     0609  0871               	movf	___lwdiv@divisor+1,w
  1462     060A  1C03               	skipc
  1463     060B  03F3               	decf	___lwdiv@dividend+1,f
  1464     060C  02F3               	subwf	___lwdiv@dividend+1,f
  1465     060D                     l904:
  1466     060D  1474               	bsf	___lwdiv@quotient,0
  1467     060E                     l906:
  1468     060E  3001               	movlw	1
  1469     060F                     u295:
  1470     060F  1003               	clrc
  1471     0610  0CF1               	rrf	___lwdiv@divisor+1,f
  1472     0611  0CF0               	rrf	___lwdiv@divisor,f
  1473     0612  3EFF               	addlw	-1
  1474     0613  1D03               	skipz
  1475     0614  2E0F               	goto	u295
  1476     0615                     l908:
  1477     0615  3001               	movlw	1
  1478     0616  02F6               	subwf	___lwdiv@counter,f
  1479     0617  1D03               	btfss	3,2
  1480     0618  2E1A               	goto	u301
  1481     0619  2E1B               	goto	u300
  1482     061A                     u301:
  1483     061A  2DF6               	goto	l900
  1484     061B                     u300:
  1485     061B                     l910:
  1486     061B  0875               	movf	___lwdiv@quotient+1,w
  1487     061C  00F1               	movwf	?___lwdiv+1
  1488     061D  0874               	movf	___lwdiv@quotient,w
  1489     061E  00F0               	movwf	?___lwdiv
  1490     061F                     l442:
  1491     061F  0008               	return
  1492     0620                     __end_of___lwdiv:
  1493                           
  1494                           	psect	text7
  1495     0554                     __ptext7:	
  1496 ;; *************** function _WriteByteToEE *****************
  1497 ;; Defined at:
  1498 ;;		line 77 in file "main.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;  data            1    wreg     unsigned char 
  1501 ;;  address         1    0[COMMON] const unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  data            1    1[COMMON] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         1       0       0       0       0
  1514 ;;      Locals:         1       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0
  1516 ;;      Totals:         2       0       0       0       0
  1517 ;;Total ram usage:        2 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526     0554                     _WriteByteToEE:	
  1527                           ;psect for function _WriteByteToEE
  1528                           
  1529                           
  1530                           ;incstack = 0
  1531                           ; Regs used in _WriteByteToEE: [wreg+status,2+status,0]
  1532                           ;WriteByteToEE@data stored from wreg
  1533     0554  00F1               	movwf	WriteByteToEE@data
  1534     0555                     l858:
  1535                           
  1536                           ;main.c: 78:     EEADR=address;
  1537     0555  0870               	movf	WriteByteToEE@address,w
  1538     0556  1283               	bcf	3,5	;RP0=0, select bank2
  1539     0557  1703               	bsf	3,6	;RP1=1, select bank2
  1540     0558  008D               	movwf	13	;volatile
  1541                           
  1542                           ;main.c: 79:     EEDATA=data;
  1543     0559  0871               	movf	WriteByteToEE@data,w
  1544     055A  008C               	movwf	12	;volatile
  1545     055B                     l860:
  1546                           
  1547                           ;main.c: 81:     EECON1 &= ~(1<<7);
  1548     055B  307F               	movlw	127
  1549     055C  1683               	bsf	3,5	;RP0=1, select bank3
  1550     055D  1703               	bsf	3,6	;RP1=1, select bank3
  1551     055E  058C               	andwf	12,f	;volsfr
  1552     055F                     l862:
  1553                           
  1554                           ;main.c: 83:     EECON1 |= (1<<2);
  1555     055F  150C               	bsf	12,2	;volsfr
  1556     0560                     l864:
  1557                           
  1558                           ;main.c: 84:     EECON2=0x55;
  1559     0560  3055               	movlw	85
  1560     0561  008D               	movwf	13	;volsfr
  1561     0562                     l866:
  1562                           
  1563                           ;main.c: 85:     EECON2=0xAA;
  1564     0562  30AA               	movlw	170
  1565     0563  008D               	movwf	13	;volsfr
  1566     0564                     l868:
  1567                           
  1568                           ;main.c: 88:     EECON1 |= (1<<1);
  1569     0564  148C               	bsf	12,1	;volsfr
  1570     0565                     l50:	
  1571                           ;main.c: 91:     while(PIR2bits.EEIF==0);
  1572                           
  1573     0565  1283               	bcf	3,5	;RP0=0, select bank0
  1574     0566  1303               	bcf	3,6	;RP1=0, select bank0
  1575     0567  1E0D               	btfss	13,4	;volatile
  1576     0568  2D6A               	goto	u221
  1577     0569  2D6B               	goto	u220
  1578     056A                     u221:
  1579     056A  2D65               	goto	l50
  1580     056B                     u220:
  1581     056B                     l52:
  1582                           
  1583                           ;main.c: 92:     PIR2bits.EEIF=0;
  1584     056B  120D               	bcf	13,4	;volatile
  1585     056C                     l53:
  1586     056C  0008               	return
  1587     056D                     __end_of_WriteByteToEE:
  1588                           
  1589                           	psect	text8
  1590     0526                     __ptext8:	
  1591 ;; *************** function _ReadByteFromEE *****************
  1592 ;; Defined at:
  1593 ;;		line 95 in file "main.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  address         1    wreg     const unsigned char 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  address         1    2[COMMON] const unsigned char 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, status,0
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         1       0       0       0       0
  1609 ;;      Temps:          2       0       0       0       0
  1610 ;;      Totals:         3       0       0       0       0
  1611 ;;Total ram usage:        3 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620     0526                     _ReadByteFromEE:	
  1621                           ;psect for function _ReadByteFromEE
  1622                           
  1623                           
  1624                           ;incstack = 0
  1625                           ; Regs used in _ReadByteFromEE: [wreg+status,2+status,0]
  1626                           ;ReadByteFromEE@address stored from wreg
  1627     0526  00F2               	movwf	ReadByteFromEE@address
  1628     0527                     l870:
  1629                           
  1630                           ;main.c: 96:     EEADR=address;
  1631     0527  0872               	movf	ReadByteFromEE@address,w
  1632     0528  1283               	bcf	3,5	;RP0=0, select bank2
  1633     0529  1703               	bsf	3,6	;RP1=1, select bank2
  1634     052A  008D               	movwf	13	;volatile
  1635     052B                     l872:
  1636                           
  1637                           ;main.c: 97:     EECON1 &= ~(1<<7);
  1638     052B  307F               	movlw	127
  1639     052C  1683               	bsf	3,5	;RP0=1, select bank3
  1640     052D  1703               	bsf	3,6	;RP1=1, select bank3
  1641     052E  058C               	andwf	12,f	;volsfr
  1642     052F                     l874:
  1643                           
  1644                           ;main.c: 99:     EECON1 |=(1<<0);
  1645     052F  140C               	bsf	12,0	;volsfr
  1646     0530                     l876:
  1647                           
  1648                           ;main.c: 100:     byte=EEDATA;
  1649     0530  1283               	bcf	3,5	;RP0=0, select bank2
  1650     0531  1703               	bsf	3,6	;RP1=1, select bank2
  1651     0532  080C               	movf	12,w	;volatile
  1652     0533  00F0               	movwf	??_ReadByteFromEE
  1653     0534  01F1               	clrf	??_ReadByteFromEE+1
  1654     0535  0870               	movf	??_ReadByteFromEE,w
  1655     0536  1283               	bcf	3,5	;RP0=0, select bank0
  1656     0537  1303               	bcf	3,6	;RP1=0, select bank0
  1657     0538  00B4               	movwf	_byte
  1658     0539  0871               	movf	??_ReadByteFromEE+1,w
  1659     053A  00B5               	movwf	_byte+1
  1660     053B                     l56:
  1661     053B  0008               	return
  1662     053C                     __end_of_ReadByteFromEE:
  1663     0002                     ___latbits      equ	2
  1664     007E                     btemp           set	126	;btemp
  1665     007E                     wtemp0          set	126
  1666                           
  1667                           	psect	config
  1668                           
  1669                           ;Config register CONFIG @ 0x2007
  1670                           ;	Oscillator Selection bits
  1671                           ;	FOSC = EXTRC, RC oscillator
  1672                           ;	Watchdog Timer Enable bit
  1673                           ;	WDTE = OFF, WDT disabled
  1674                           ;	Power-up Timer Enable bit
  1675                           ;	PWRTE = OFF, PWRT disabled
  1676                           ;	Brown-out Reset Enable bit
  1677                           ;	BOREN = OFF, BOR disabled
  1678                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1679                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1680                           ;	Data EEPROM Memory Code Protection bit
  1681                           ;	CPD = OFF, Data EEPROM code protection off
  1682                           ;	Flash Program Memory Write Enable bits
  1683                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1684                           ;	In-Circuit Debugger Mode bit
  1685                           ;	DEBUG = 0x1, unprogrammed default
  1686                           ;	Flash Program Memory Code Protection bit
  1687                           ;	CP = OFF, Code protection off
  1688     2007                     	org	8199
  1689     2007  3F3B               	dw	16187

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     11      33
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    main@value	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->___lwdiv
    _initLCD->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0     895
                                              7 COMMON     3     3      0
                                              0 BANK0     11    11      0
                     _ReadByteFromEE
                      _WriteByteToEE
                            ___lwdiv
                            ___lwmod
                            _initLCD
                        _lcd_command
                           _lcd_data
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2      91
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0      29
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     161
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _WriteByteToEE                                        2     1      1      67
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ReadByteFromEE                                       3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadByteFromEE
   _WriteByteToEE
   ___lwdiv
   ___lwmod
   _initLCD
     _lcd_command
   _lcd_command
   _lcd_data
   _strlen

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      12     85.7%
BANK0               80     11      33     41.2%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      45      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Jul 24 00:27:00 2025

                      pc 0002             lcd_data@data 0072                       l41 0588  
                     l50 0565                       l35 05A5                       l52 056B  
                     l53 056C                       l38 066B                       l56 053B  
                     fsr 0004                      l442 061F                      l452 05DD  
                    l624 0553                      l900 05F6                      l820 0590  
                    l902 0607                      l910 061B                      l822 0591  
                    l830 062B                      l904 060D                      l920 05B6  
                    l824 059C                      l816 058A                      l840 064D  
                    l832 062F                      l906 060E                      l930 05D3  
                    l922 05B8                      l914 05A6                      l818 058E  
                    l842 0653                      l834 0635                      l826 0620  
                    l850 0571                      l860 055B                      l908 0615  
                    l924 05BC                      l916 05AC                      l932 05D9  
                    l844 065C                      l836 063E                      l828 0627  
                    l852 0573                      l940 067B                      l870 0527  
                    l862 055F                      l926 05C6                      l918 05AF  
                    l846 0662                      l838 0644                      l854 057B  
                    l950 0725                      l942 067E                      l872 052B  
                    l864 0560                      l928 05CC                      l856 057F  
                    l848 056E                      l880 053F                      l960 073D  
                    l944 068B                      l936 066C                      l874 052F  
                    l866 0562                      l858 0555                      l890 05E0  
                    l882 0541                      l970 0759                      l962 0741  
                    l946 0693                      l938 0677                      l876 0530  
                    l868 0564                      l892 05E6                      l884 054D  
                    l980 079E                      l972 075F                      l964 0747  
                    l956 0729                      l948 06A6                      l894 05E9  
                    l878 053C                      l982 07A9                      l974 0765  
                    l966 074D                      l958 0731                      l896 05F0  
                    l888 05DE                      l992 07C2                      l976 0770  
                    l984 07AF                      l968 0753                      l898 05F2  
                    l994 07CF                      l986 07B5                      l978 0778  
                    l988 07BD                      l998 07D8                      u220 056B  
                    u300 061B                      u221 056A                      u301 061A  
                    u310 05AC                      u230 054D                      u311 05AB  
                    u231 054C                      u240 05E6                      u400 07C1  
                    u241 05E5                      u401 07C0                      u330 05BC  
                    u410 07ED                      u331 05BB                      u411 07EC  
                    u260 05F6                      u340 05C6                      u261 05F5  
                    u341 05C5                      u325 05B0                      u255 05EA  
                    u415 07E9                      u280 0607                      u360 05D9  
                    u281 0606                      u361 05D8                      u345 05C2  
                    u370 06A6                      u275 05F7                      u355 05CD  
                    u507 05A0                      u427 0737                      u371 06A5  
                    u380 0770                      u285 0603                      u437 0576  
                    u381 076F                      u390 07B5                      u295 060F  
                    u447 0583                      u391 07B4                      u375 06A2  
                    u457 0639                      u467 0648                      u477 0657  
                    u487 0666                      u497 0593                      _rem 007A  
                    fsr0 0004                      indf 0000                     l1000 07E0  
                   STR_1 0009                     _arr1 0020                     _main 066C  
                   _byte 0034                     btemp 007E                     start 0000  
                  ?_main 0070                    _EEADR 010D          __end_of___lwdiv 0620  
        __end_of___lwmod 05DE                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088          __end_of_initLCD 066C        WriteByteToEE@data 0071  
                  main@i 0038                    main@j 003F                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F1  
           __end_of_main 07F1                   ??_main 0077           lcd_command@cmd 0072  
         _ReadByteFromEE 0526                   _EEDATA 010C                   _EECON1 018C  
                 _EECON2 018D            _WriteByteToEE 0554         __end_of_lcd_data 0589  
              ??___lwdiv 0074                ??___lwmod 0074                   _strlen 053C  
              ??_initLCD 0073   __end_of_ReadByteFromEE 053C           ?_WriteByteToEE 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070          ?_ReadByteFromEE 0070  
             __pbssBANK0 0020               __pmaintext 066C                  ?_strlen 0070  
        ??_WriteByteToEE 0071                ?_lcd_data 0070               __stringtab 0003  
                ___lwdiv 05DE                  ___lwmod 05A6                  __ptext1 053C  
                __ptext2 056D                  __ptext3 0620                  __ptext4 0589  
                __ptext5 05A6                  __ptext6 05DE                  __ptext7 0554  
                __ptext8 0526                  _initLCD 0620               ??_lcd_data 0070  
                main@rem 0036                  clrloop0 051F     end_of_initialization 07FC  
                strlen@a 0072                  strlen@s 0070            ??_lcd_command 0070  
       ??_ReadByteFromEE 0070           __end_of_strlen 0554      start_initialization 07F1  
    __end_of_lcd_command 05A6                 ??_strlen 0072              __pbssCOMMON 007A  
              ___latbits 0002            __pcstackBANK0 0036         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                 ?___lwmod 0070                __pstrings 0003  
               ?_initLCD 0070         ___lwdiv@quotient 0074    __end_of_WriteByteToEE 056D  
              clear_ram0 051E              _lcd_command 0589                 _PIR2bits 000D  
            __stringbase 0008                main@count 003A                main@value 003C  
  ReadByteFromEE@address 0072       __end_of__stringtab 0009          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076                 _lcd_data 056D     WriteByteToEE@address 0070  
               main@i_94 003D         ___lwmod@dividend 0072                stringcode 0003  
        ___lwmod@divisor 0070          ___lwmod@counter 0074                 stringdir 0003  
               stringtab 0003             ?_lcd_command 0070  
