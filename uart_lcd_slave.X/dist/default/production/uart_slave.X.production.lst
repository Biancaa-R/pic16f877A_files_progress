

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri May 30 20:07:59 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     PORTA           equ	5	;# 
    66     0006                     PORTB           equ	6	;# 
    67     0007                     PORTC           equ	7	;# 
    68     0008                     PORTD           equ	8	;# 
    69     0009                     PORTE           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     0088                     TRISD           equ	136	;# 
   100     0089                     TRISE           equ	137	;# 
   101     008C                     PIE1            equ	140	;# 
   102     008D                     PIE2            equ	141	;# 
   103     008E                     PCON            equ	142	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0094                     SSPSTAT         equ	148	;# 
   108     0098                     TXSTA           equ	152	;# 
   109     0099                     SPBRG           equ	153	;# 
   110     009C                     CMCON           equ	156	;# 
   111     009D                     CVRCON          equ	157	;# 
   112     009E                     ADRESL          equ	158	;# 
   113     009F                     ADCON1          equ	159	;# 
   114     010C                     EEDATA          equ	268	;# 
   115     010D                     EEADR           equ	269	;# 
   116     010E                     EEDATH          equ	270	;# 
   117     010F                     EEADRH          equ	271	;# 
   118     018C                     EECON1          equ	396	;# 
   119     018D                     EECON2          equ	397	;# 
   120     0000                     INDF            equ	0	;# 
   121     0001                     TMR0            equ	1	;# 
   122     0002                     PCL             equ	2	;# 
   123     0003                     STATUS          equ	3	;# 
   124     0004                     FSR             equ	4	;# 
   125     0005                     PORTA           equ	5	;# 
   126     0006                     PORTB           equ	6	;# 
   127     0007                     PORTC           equ	7	;# 
   128     0008                     PORTD           equ	8	;# 
   129     0009                     PORTE           equ	9	;# 
   130     000A                     PCLATH          equ	10	;# 
   131     000B                     INTCON          equ	11	;# 
   132     000C                     PIR1            equ	12	;# 
   133     000D                     PIR2            equ	13	;# 
   134     000E                     TMR1            equ	14	;# 
   135     000E                     TMR1L           equ	14	;# 
   136     000F                     TMR1H           equ	15	;# 
   137     0010                     T1CON           equ	16	;# 
   138     0011                     TMR2            equ	17	;# 
   139     0012                     T2CON           equ	18	;# 
   140     0013                     SSPBUF          equ	19	;# 
   141     0014                     SSPCON          equ	20	;# 
   142     0015                     CCPR1           equ	21	;# 
   143     0015                     CCPR1L          equ	21	;# 
   144     0016                     CCPR1H          equ	22	;# 
   145     0017                     CCP1CON         equ	23	;# 
   146     0018                     RCSTA           equ	24	;# 
   147     0019                     TXREG           equ	25	;# 
   148     001A                     RCREG           equ	26	;# 
   149     001B                     CCPR2           equ	27	;# 
   150     001B                     CCPR2L          equ	27	;# 
   151     001C                     CCPR2H          equ	28	;# 
   152     001D                     CCP2CON         equ	29	;# 
   153     001E                     ADRESH          equ	30	;# 
   154     001F                     ADCON0          equ	31	;# 
   155     0081                     OPTION_REG      equ	129	;# 
   156     0085                     TRISA           equ	133	;# 
   157     0086                     TRISB           equ	134	;# 
   158     0087                     TRISC           equ	135	;# 
   159     0088                     TRISD           equ	136	;# 
   160     0089                     TRISE           equ	137	;# 
   161     008C                     PIE1            equ	140	;# 
   162     008D                     PIE2            equ	141	;# 
   163     008E                     PCON            equ	142	;# 
   164     0091                     SSPCON2         equ	145	;# 
   165     0092                     PR2             equ	146	;# 
   166     0093                     SSPADD          equ	147	;# 
   167     0094                     SSPSTAT         equ	148	;# 
   168     0098                     TXSTA           equ	152	;# 
   169     0099                     SPBRG           equ	153	;# 
   170     009C                     CMCON           equ	156	;# 
   171     009D                     CVRCON          equ	157	;# 
   172     009E                     ADRESL          equ	158	;# 
   173     009F                     ADCON1          equ	159	;# 
   174     010C                     EEDATA          equ	268	;# 
   175     010D                     EEADR           equ	269	;# 
   176     010E                     EEDATH          equ	270	;# 
   177     010F                     EEADRH          equ	271	;# 
   178     018C                     EECON1          equ	396	;# 
   179     018D                     EECON2          equ	397	;# 
   180     0008                     _PORTD          set	8
   181     0018                     _RCSTA          set	24
   182     0019                     _TXREG          set	25
   183     001A                     _RCREG          set	26
   184     0031                     _RB1            set	49
   185     0033                     _RB3            set	51
   186     0064                     _TXIF           set	100
   187     0065                     _RCIF           set	101
   188     0088                     _TRISD          set	136
   189     0099                     _SPBRG          set	153
   190     0098                     _TXSTA          set	152
   191     0087                     _TRISC          set	135
   192     0431                     _TRISB1         set	1073
   193     0433                     _TRISB3         set	1075
   194                           
   195                           	psect	strings
   196     0003                     __pstrings:
   197     0003                     stringtab:
   198     0003                     __stringtab:
   199     0003                     stringcode:	
   200                           ;	String table - string pointers are 1 byte each
   201                           
   202     0003                     stringdir:
   203     0003  3000               	movlw	high stringdir
   204     0004  008A               	movwf	10
   205     0005  0804               	movf	4,w
   206     0006  0A84               	incf	4,f
   207     0007  0782               	addwf	2,f
   208     0008                     __stringbase:
   209     0008  3400               	retlw	0
   210     0009                     __end_of__stringtab:
   211     0009                     STR_1:
   212     0009  3452               	retlw	82	;'R'
   213     000A  3458               	retlw	88	;'X'
   214     000B  343A               	retlw	58	;':'
   215     000C  3420               	retlw	32	;' '
   216     000D  3427               	retlw	39	;'''
   217     000E  3400               	retlw	0
   218     000F                     STR_2:
   219     000F  3454               	retlw	84	;'T'
   220     0010  3458               	retlw	88	;'X'
   221     0011  343A               	retlw	58	;':'
   222     0012  3420               	retlw	32	;' '
   223     0013  3427               	retlw	39	;'''
   224     0014  3400               	retlw	0
   225                           
   226                           	psect	cinit
   227     07FA                     start_initialization:	
   228                           ; #config settings
   229                           
   230     07FA                     __initialization:
   231                           
   232                           ; Clear objects allocated to COMMON
   233     07FA  01F7               	clrf	__pbssCOMMON& (0+127)
   234     07FB  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   235     07FC                     end_of_initialization:	
   236                           ;End of C runtime variable initialization code
   237                           
   238     07FC                     __end_of__initialization:
   239     07FC  0183               	clrf	3
   240     07FD  120A  118A  2F83   	ljmp	_main	;jump to C main() function
   241                           
   242                           	psect	bssCOMMON
   243     0077                     __pbssCOMMON:
   244     0077                     _tx_buffer:
   245     0077                     	ds	1
   246     0078                     _rx_buffer:
   247     0078                     	ds	1
   248                           
   249                           	psect	cstackCOMMON
   250     0070                     __pcstackCOMMON:
   251     0070                     ?_uart_init:
   252     0070                     ?_lcd_init:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_lcd_clear:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_lcd_data:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ?_lcd_cmd:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ?_main:	
   265                           ; 1 bytes @ 0x0
   266                           
   267     0070                     ??_uart_init:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     0070                     ??_lcd_data:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     0070                     ??_lcd_cmd:	
   274                           ; 1 bytes @ 0x0
   275                           
   276                           
   277                           ; 1 bytes @ 0x0
   278     0070                     	ds	2
   279     0072                     lcd_cmd@cmd:
   280     0072                     lcd_data@data:	
   281                           ; 1 bytes @ 0x2
   282                           
   283                           
   284                           ; 1 bytes @ 0x2
   285     0072                     	ds	1
   286     0073                     ?_lcd_display:
   287     0073                     lcd_display@msg:	
   288                           ; 1 bytes @ 0x3
   289                           
   290     0073                     ??_lcd_init:	
   291                           ; 1 bytes @ 0x3
   292                           
   293     0073                     ??_lcd_clear:	
   294                           ; 1 bytes @ 0x3
   295                           
   296                           
   297                           ; 1 bytes @ 0x3
   298     0073                     	ds	1
   299     0074                     lcd_display@line:
   300                           
   301                           ; 1 bytes @ 0x4
   302     0074                     	ds	1
   303     0075                     ??_lcd_display:
   304     0075                     ??_main:	
   305                           ; 1 bytes @ 0x5
   306                           
   307                           
   308                           ; 1 bytes @ 0x5
   309     0075                     	ds	2
   310                           
   311                           	psect	maintext
   312     0783                     __pmaintext:	
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 33 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;                  1    wreg      void 
   325 ;; Registers used:
   326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : B00/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   332 ;;      Params:         0       0       0       0       0
   333 ;;      Locals:         0       0       0       0       0
   334 ;;      Temps:          2       0       0       0       0
   335 ;;      Totals:         2       0       0       0       0
   336 ;;Total ram usage:        2 bytes
   337 ;; Hardware stack levels required when called: 2
   338 ;; This function calls:
   339 ;;		_lcd_clear
   340 ;;		_lcd_data
   341 ;;		_lcd_display
   342 ;;		_lcd_init
   343 ;;		_uart_init
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349     0783                     _main:	
   350                           ;psect for function _main
   351                           
   352     0783                     l728:	
   353                           ;incstack = 0
   354                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   355                           
   356                           
   357                           ;main.c: 34:     uart_init();
   358     0783  120A  118A  2718  120A  118A  	fcall	_uart_init
   359     0788                     l730:
   360                           
   361                           ;main.c: 35:     lcd_init();
   362     0788  120A  118A  272D  120A  118A  	fcall	_lcd_init
   363     078D                     l732:
   364                           
   365                           ;main.c: 38:         if (RCIF) {
   366     078D  1283               	bcf	3,5	;RP0=0, select bank0
   367     078E  1303               	bcf	3,6	;RP1=0, select bank0
   368     078F  1E8C               	btfss	12,5	;volatile
   369     0790  2F92               	goto	u101
   370     0791  2F93               	goto	u100
   371     0792                     u101:
   372     0792  2F8D               	goto	l732
   373     0793                     u100:
   374     0793                     l734:
   375                           
   376                           ;main.c: 39:             rx_buffer = RCREG;
   377     0793  081A               	movf	26,w	;volatile
   378     0794  00F8               	movwf	_rx_buffer
   379     0795                     l736:
   380                           
   381                           ;main.c: 42:             lcd_clear();
   382     0795  120A  118A  26E0  120A  118A  	fcall	_lcd_clear
   383     079A                     l738:
   384                           
   385                           ;main.c: 43:             lcd_display("RX: '", 1);
   386     079A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   387     079B  00F3               	movwf	lcd_display@msg
   388     079C  01F4               	clrf	lcd_display@line
   389     079D  0AF4               	incf	lcd_display@line,f
   390     079E  120A  118A  274F  120A  118A  	fcall	_lcd_display
   391     07A3                     l740:
   392                           
   393                           ;main.c: 44:             lcd_data(rx_buffer);
   394     07A3  0878               	movf	_rx_buffer,w
   395     07A4  120A  118A  2704  120A  118A  	fcall	_lcd_data
   396     07A9                     l742:
   397                           
   398                           ;main.c: 45:             lcd_data('\'');
   399     07A9  3027               	movlw	39
   400     07AA  120A  118A  2704  120A  118A  	fcall	_lcd_data
   401                           
   402                           ;main.c: 48:             switch (rx_buffer) {
   403     07AF  2FBE               	goto	l748
   404     07B0                     l54:	
   405                           ;main.c: 49:                 case 'A': tx_buffer = 'a'; break;
   406                           
   407     07B0  3061               	movlw	97
   408     07B1  00F7               	movwf	_tx_buffer
   409     07B2  2FCC               	goto	l750
   410     07B3                     l56:	
   411                           ;main.c: 50:                 case 'B': tx_buffer = 'b'; break;
   412                           
   413     07B3  3062               	movlw	98
   414     07B4  00F7               	movwf	_tx_buffer
   415     07B5  2FCC               	goto	l750
   416     07B6                     l57:	
   417                           ;main.c: 51:                 case 'C': tx_buffer = 'c'; break;
   418                           
   419     07B6  3063               	movlw	99
   420     07B7  00F7               	movwf	_tx_buffer
   421     07B8  2FCC               	goto	l750
   422     07B9                     l58:	
   423                           ;main.c: 52:                 case 'D': tx_buffer = 'd'; break;
   424                           
   425     07B9  3064               	movlw	100
   426     07BA  00F7               	movwf	_tx_buffer
   427     07BB  2FCC               	goto	l750
   428     07BC                     l744:
   429     07BC  01F7               	clrf	_tx_buffer
   430     07BD  2FCC               	goto	l750
   431     07BE                     l748:
   432     07BE  0878               	movf	_rx_buffer,w
   433                           
   434                           ; Switch size 1, requested type "simple"
   435                           ; Number of cases is 4, Range of values is 65 to 68
   436                           ; switch strategies available:
   437                           ; Name         Instructions Cycles
   438                           ; simple_byte           13     7 (average)
   439                           ; direct_byte           23    11 (fixed)
   440                           ; jumptable            263     9 (fixed)
   441                           ;	Chosen strategy is simple_byte
   442     07BF  3A41               	xorlw	65	; case 65
   443     07C0  1903               	skipnz
   444     07C1  2FB0               	goto	l54
   445     07C2  3A03               	xorlw	3	; case 66
   446     07C3  1903               	skipnz
   447     07C4  2FB3               	goto	l56
   448     07C5  3A01               	xorlw	1	; case 67
   449     07C6  1903               	skipnz
   450     07C7  2FB6               	goto	l57
   451     07C8  3A07               	xorlw	7	; case 68
   452     07C9  1903               	skipnz
   453     07CA  2FB9               	goto	l58
   454     07CB  2FBC               	goto	l744
   455     07CC                     l750:
   456                           
   457                           ;main.c: 57:             if (tx_buffer) {
   458     07CC  0877               	movf	_tx_buffer,w
   459     07CD  1903               	btfsc	3,2
   460     07CE  2FD0               	goto	u111
   461     07CF  2FD1               	goto	u110
   462     07D0                     u111:
   463     07D0  2F8D               	goto	l732
   464     07D1                     u110:
   465     07D1                     l61:
   466     07D1  1283               	bcf	3,5	;RP0=0, select bank0
   467     07D2  1303               	bcf	3,6	;RP1=0, select bank0
   468     07D3  1E0C               	btfss	12,4	;volatile
   469     07D4  2FD6               	goto	u121
   470     07D5  2FD7               	goto	u120
   471     07D6                     u121:
   472     07D6  2FD1               	goto	l61
   473     07D7                     u120:
   474     07D7                     l754:
   475                           
   476                           ;main.c: 59:                 TXREG = tx_buffer;
   477     07D7  0877               	movf	_tx_buffer,w
   478     07D8  0099               	movwf	25	;volatile
   479                           
   480                           ;main.c: 60:                 _delay((unsigned long)((100)*(6000000/4000.0)));
   481     07D9  30C3               	movlw	195
   482     07DA  00F6               	movwf	??_main+1
   483     07DB  30CD               	movlw	205
   484     07DC  00F5               	movwf	??_main
   485     07DD                     u137:
   486     07DD  0BF5               	decfsz	??_main,f
   487     07DE  2FDD               	goto	u137
   488     07DF  0BF6               	decfsz	??_main+1,f
   489     07E0  2FDD               	goto	u137
   490     07E1                     l756:
   491                           
   492                           ;main.c: 63:                 lcd_display("TX: '", 2);
   493     07E1  3007               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   494     07E2  00F3               	movwf	lcd_display@msg
   495     07E3  3002               	movlw	2
   496     07E4  00F4               	movwf	lcd_display@line
   497     07E5  120A  118A  274F  120A  118A  	fcall	_lcd_display
   498     07EA                     l758:
   499                           
   500                           ;main.c: 64:                 lcd_data(tx_buffer);
   501     07EA  0877               	movf	_tx_buffer,w
   502     07EB  120A  118A  2704  120A  118A  	fcall	_lcd_data
   503     07F0                     l760:
   504                           
   505                           ;main.c: 65:                 lcd_data('\'');
   506     07F0  3027               	movlw	39
   507     07F1  120A  118A  2704  120A  118A  	fcall	_lcd_data
   508     07F6  2F8D               	goto	l732
   509     07F7  120A  118A  2800   	ljmp	start
   510     07FA                     __end_of_main:
   511                           
   512                           	psect	text1
   513     0718                     __ptext1:	
   514 ;; *************** function _uart_init *****************
   515 ;; Defined at:
   516 ;;		line 71 in file "main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		status,2
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   530 ;;      Params:         0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0
   532 ;;      Temps:          0       0       0       0       0
   533 ;;      Totals:         0       0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used: 1
   536 ;; This function calls:
   537 ;;		Nothing
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543     0718                     _uart_init:	
   544                           ;psect for function _uart_init
   545                           
   546     0718                     l650:	
   547                           ;incstack = 0
   548                           ; Regs used in _uart_init: [status,2]
   549                           
   550                           
   551                           ;main.c: 72:     TRISC = 0xC0;
   552     0718  30C0               	movlw	192
   553     0719  1683               	bsf	3,5	;RP0=1, select bank1
   554     071A  1303               	bcf	3,6	;RP1=0, select bank1
   555     071B  0087               	movwf	7	;volatile
   556                           
   557                           ;main.c: 73:     TXSTA = 0x20;
   558     071C  3020               	movlw	32
   559     071D  0098               	movwf	24	;volatile
   560                           
   561                           ;main.c: 74:     SPBRG = 0x09;
   562     071E  3009               	movlw	9
   563     071F  0099               	movwf	25	;volatile
   564                           
   565                           ;main.c: 75:     RCSTA = 0x90;
   566     0720  3090               	movlw	144
   567     0721  1283               	bcf	3,5	;RP0=0, select bank0
   568     0722  1303               	bcf	3,6	;RP1=0, select bank0
   569     0723  0098               	movwf	24	;volatile
   570     0724                     l652:
   571                           
   572                           ;main.c: 78:     TRISD = 0x00;
   573     0724  1683               	bsf	3,5	;RP0=1, select bank1
   574     0725  1303               	bcf	3,6	;RP1=0, select bank1
   575     0726  0188               	clrf	8	;volatile
   576     0727                     l654:
   577                           
   578                           ;main.c: 79:     TRISB3 = 0;
   579     0727  1186               	bcf	6,3	;volatile
   580     0728                     l656:
   581                           
   582                           ;main.c: 80:     TRISB1 = 0;
   583     0728  1086               	bcf	6,1	;volatile
   584                           
   585                           ;main.c: 81:     PORTD = 0x00;
   586     0729  1283               	bcf	3,5	;RP0=0, select bank0
   587     072A  1303               	bcf	3,6	;RP1=0, select bank0
   588     072B  0188               	clrf	8	;volatile
   589     072C                     l69:
   590     072C  0008               	return
   591     072D                     __end_of_uart_init:
   592                           
   593                           	psect	text2
   594     072D                     __ptext2:	
   595 ;; *************** function _lcd_init *****************
   596 ;; Defined at:
   597 ;;		line 84 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, status,2, status,0, pclath, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   611 ;;      Params:         0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0
   613 ;;      Temps:          2       0       0       0       0
   614 ;;      Totals:         2       0       0       0       0
   615 ;;Total ram usage:        2 bytes
   616 ;; Hardware stack levels used: 1
   617 ;; Hardware stack levels required when called: 1
   618 ;; This function calls:
   619 ;;		_lcd_cmd
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625     072D                     _lcd_init:	
   626                           ;psect for function _lcd_init
   627                           
   628     072D                     l658:	
   629                           ;incstack = 0
   630                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   631                           
   632                           
   633                           ;main.c: 85:     lcd_cmd(0x38);
   634     072D  3038               	movlw	56
   635     072E  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   636                           
   637                           ;main.c: 86:     lcd_cmd(0x0C);
   638     0733  300C               	movlw	12
   639     0734  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   640                           
   641                           ;main.c: 87:     lcd_cmd(0x01);
   642     0739  3001               	movlw	1
   643     073A  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   644                           
   645                           ;main.c: 88:     lcd_cmd(0x06);
   646     073F  3006               	movlw	6
   647     0740  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   648     0745                     l660:
   649                           
   650                           ;main.c: 89:     _delay((unsigned long)((2)*(6000000/4000.0)));
   651     0745  3004               	movlw	4
   652     0746  00F4               	movwf	??_lcd_init+1
   653     0747  30E4               	movlw	228
   654     0748  00F3               	movwf	??_lcd_init
   655     0749                     u147:
   656     0749  0BF3               	decfsz	??_lcd_init,f
   657     074A  2F49               	goto	u147
   658     074B  0BF4               	decfsz	??_lcd_init+1,f
   659     074C  2F49               	goto	u147
   660     074D  0000               	nop
   661     074E                     l72:
   662     074E  0008               	return
   663     074F                     __end_of_lcd_init:
   664                           
   665                           	psect	text3
   666     074F                     __ptext3:	
   667 ;; *************** function _lcd_display *****************
   668 ;; Defined at:
   669 ;;		line 109 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  msg             1    3[COMMON] PTR const unsigned char 
   672 ;;		 -> STR_2(6), STR_1(6), 
   673 ;;  line            1    4[COMMON] unsigned char 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   685 ;;      Params:         2       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0
   688 ;;      Totals:         2       0       0       0       0
   689 ;;Total ram usage:        2 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 1
   692 ;; This function calls:
   693 ;;		_lcd_cmd
   694 ;;		_lcd_data
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700     074F                     _lcd_display:	
   701                           ;psect for function _lcd_display
   702                           
   703     074F                     l714:	
   704                           ;incstack = 0
   705                           ; Regs used in _lcd_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   706                           
   707                           
   708                           ;main.c: 110:     if (line == 1) lcd_cmd(0x80);
   709     074F  0374               	decf	lcd_display@line,w
   710     0750  1D03               	btfss	3,2
   711     0751  2F53               	goto	u71
   712     0752  2F54               	goto	u70
   713     0753                     u71:
   714     0753  2F5B               	goto	l718
   715     0754                     u70:
   716     0754                     l716:
   717     0754  3080               	movlw	128
   718     0755  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   719     075A  2F76               	goto	l726
   720     075B                     l718:
   721     075B  3002               	movlw	2
   722     075C  0674               	xorwf	lcd_display@line,w
   723     075D  1D03               	btfss	3,2
   724     075E  2F60               	goto	u81
   725     075F  2F61               	goto	u80
   726     0760                     u81:
   727     0760  2F76               	goto	l726
   728     0761                     u80:
   729     0761                     l720:
   730     0761  30C0               	movlw	192
   731     0762  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   732     0767  2F76               	goto	l726
   733     0768                     l722:
   734     0768  0873               	movf	lcd_display@msg,w
   735     0769  0084               	movwf	4
   736     076A  120A  118A  2003  120A  118A  	fcall	stringdir
   737     076F  120A  118A  2704  120A  118A  	fcall	_lcd_data
   738     0774                     l724:
   739     0774  3001               	movlw	1
   740     0775  07F3               	addwf	lcd_display@msg,f
   741     0776                     l726:
   742     0776  0873               	movf	lcd_display@msg,w
   743     0777  0084               	movwf	4
   744     0778  120A  118A  2003  120A  118A  	fcall	stringdir
   745     077D  3A00               	xorlw	0
   746     077E  1D03               	skipz
   747     077F  2F81               	goto	u91
   748     0780  2F82               	goto	u90
   749     0781                     u91:
   750     0781  2F68               	goto	l722
   751     0782                     u90:
   752     0782                     l90:
   753     0782  0008               	return
   754     0783                     __end_of_lcd_display:
   755                           
   756                           	psect	text4
   757     0704                     __ptext4:	
   758 ;; *************** function _lcd_data *****************
   759 ;; Defined at:
   760 ;;		line 98 in file "main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;  data            1    wreg     unsigned char 
   763 ;; Auto vars:     Size  Location     Type
   764 ;;  data            1    2[COMMON] unsigned char 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   774 ;;      Params:         0       0       0       0       0
   775 ;;      Locals:         1       0       0       0       0
   776 ;;      Temps:          2       0       0       0       0
   777 ;;      Totals:         3       0       0       0       0
   778 ;;Total ram usage:        3 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_main
   784 ;;		_lcd_display
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788     0704                     _lcd_data:	
   789                           ;psect for function _lcd_data
   790                           
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _lcd_data: [wreg]
   794                           ;lcd_data@data stored from wreg
   795     0704  00F2               	movwf	lcd_data@data
   796     0705                     l634:
   797                           
   798                           ;main.c: 99:     PORTD = data;
   799     0705  0872               	movf	lcd_data@data,w
   800     0706  1283               	bcf	3,5	;RP0=0, select bank0
   801     0707  1303               	bcf	3,6	;RP1=0, select bank0
   802     0708  0088               	movwf	8	;volatile
   803     0709                     l636:
   804                           
   805                           ;main.c: 100:     RB3 = 1;
   806     0709  1586               	bsf	6,3	;volatile
   807     070A                     l638:
   808                           
   809                           ;main.c: 101:     RB1 = 1; _delay((unsigned long)((2)*(6000000/4000.0))); RB1 = 0;
   810     070A  1486               	bsf	6,1	;volatile
   811     070B  3004               	movlw	4
   812     070C  00F1               	movwf	??_lcd_data+1
   813     070D  30E4               	movlw	228
   814     070E  00F0               	movwf	??_lcd_data
   815     070F                     u157:
   816     070F  0BF0               	decfsz	??_lcd_data,f
   817     0710  2F0F               	goto	u157
   818     0711  0BF1               	decfsz	??_lcd_data+1,f
   819     0712  2F0F               	goto	u157
   820     0713  0000               	nop
   821     0714                     l640:
   822     0714  1283               	bcf	3,5	;RP0=0, select bank0
   823     0715  1303               	bcf	3,6	;RP1=0, select bank0
   824     0716  1086               	bcf	6,1	;volatile
   825     0717                     l78:
   826     0717  0008               	return
   827     0718                     __end_of_lcd_data:
   828                           
   829                           	psect	text5
   830     06E0                     __ptext5:	
   831 ;; *************** function _lcd_clear *****************
   832 ;; Defined at:
   833 ;;		line 104 in file "main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0, pclath, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   847 ;;      Params:         0       0       0       0       0
   848 ;;      Locals:         0       0       0       0       0
   849 ;;      Temps:          2       0       0       0       0
   850 ;;      Totals:         2       0       0       0       0
   851 ;;Total ram usage:        2 bytes
   852 ;; Hardware stack levels used: 1
   853 ;; Hardware stack levels required when called: 1
   854 ;; This function calls:
   855 ;;		_lcd_cmd
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861     06E0                     _lcd_clear:	
   862                           ;psect for function _lcd_clear
   863                           
   864     06E0                     l662:	
   865                           ;incstack = 0
   866                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
   867                           
   868                           
   869                           ;main.c: 105:     lcd_cmd(0x01);
   870     06E0  3001               	movlw	1
   871     06E1  120A  118A  26F0  120A  118A  	fcall	_lcd_cmd
   872     06E6                     l664:
   873                           
   874                           ;main.c: 106:   _delay((unsigned long)((2)*(6000000/4000.0)));
   875     06E6  3004               	movlw	4
   876     06E7  00F4               	movwf	??_lcd_clear+1
   877     06E8  30E4               	movlw	228
   878     06E9  00F3               	movwf	??_lcd_clear
   879     06EA                     u167:
   880     06EA  0BF3               	decfsz	??_lcd_clear,f
   881     06EB  2EEA               	goto	u167
   882     06EC  0BF4               	decfsz	??_lcd_clear+1,f
   883     06ED  2EEA               	goto	u167
   884     06EE  0000               	nop
   885     06EF                     l81:
   886     06EF  0008               	return
   887     06F0                     __end_of_lcd_clear:
   888                           
   889                           	psect	text6
   890     06F0                     __ptext6:	
   891 ;; *************** function _lcd_cmd *****************
   892 ;; Defined at:
   893 ;;		line 92 in file "main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;  cmd             1    wreg     unsigned char 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  cmd             1    2[COMMON] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   907 ;;      Params:         0       0       0       0       0
   908 ;;      Locals:         1       0       0       0       0
   909 ;;      Temps:          2       0       0       0       0
   910 ;;      Totals:         3       0       0       0       0
   911 ;;Total ram usage:        3 bytes
   912 ;; Hardware stack levels used: 1
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_lcd_init
   917 ;;		_lcd_clear
   918 ;;		_lcd_display
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922     06F0                     _lcd_cmd:	
   923                           ;psect for function _lcd_cmd
   924                           
   925                           
   926                           ;incstack = 0
   927                           ; Regs used in _lcd_cmd: [wreg]
   928                           ;lcd_cmd@cmd stored from wreg
   929     06F0  00F2               	movwf	lcd_cmd@cmd
   930     06F1                     l642:
   931                           
   932                           ;main.c: 93:     PORTD = cmd;
   933     06F1  0872               	movf	lcd_cmd@cmd,w
   934     06F2  1283               	bcf	3,5	;RP0=0, select bank0
   935     06F3  1303               	bcf	3,6	;RP1=0, select bank0
   936     06F4  0088               	movwf	8	;volatile
   937     06F5                     l644:
   938                           
   939                           ;main.c: 94:     RB3 = 0;
   940     06F5  1186               	bcf	6,3	;volatile
   941     06F6                     l646:
   942                           
   943                           ;main.c: 95:     RB1 = 1; _delay((unsigned long)((2)*(6000000/4000.0))); RB1 = 0;
   944     06F6  1486               	bsf	6,1	;volatile
   945     06F7  3004               	movlw	4
   946     06F8  00F1               	movwf	??_lcd_cmd+1
   947     06F9  30E4               	movlw	228
   948     06FA  00F0               	movwf	??_lcd_cmd
   949     06FB                     u177:
   950     06FB  0BF0               	decfsz	??_lcd_cmd,f
   951     06FC  2EFB               	goto	u177
   952     06FD  0BF1               	decfsz	??_lcd_cmd+1,f
   953     06FE  2EFB               	goto	u177
   954     06FF  0000               	nop
   955     0700                     l648:
   956     0700  1283               	bcf	3,5	;RP0=0, select bank0
   957     0701  1303               	bcf	3,6	;RP1=0, select bank0
   958     0702  1086               	bcf	6,1	;volatile
   959     0703                     l75:
   960     0703  0008               	return
   961     0704                     __end_of_lcd_cmd:
   962     0002                     ___latbits      equ	2
   963     007E                     btemp           set	126	;btemp
   964     007E                     wtemp0          set	126
   965                           
   966                           	psect	config
   967                           
   968                           ;Config register CONFIG @ 0x2007
   969                           ;	Oscillator Selection bits
   970                           ;	FOSC = HS, HS oscillator
   971                           ;	Watchdog Timer Enable bit
   972                           ;	WDTE = OFF, WDT disabled
   973                           ;	Power-up Timer Enable bit
   974                           ;	PWRTE = OFF, PWRT disabled
   975                           ;	Brown-out Reset Enable bit
   976                           ;	BOREN = OFF, BOR disabled
   977                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   978                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   979                           ;	Data EEPROM Memory Code Protection bit
   980                           ;	CPD = OFF, Data EEPROM code protection off
   981                           ;	Flash Program Memory Write Enable bits
   982                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   983                           ;	In-Circuit Debugger Mode bit
   984                           ;	DEBUG = 0x1, unprogrammed default
   985                           ;	Flash Program Memory Code Protection bit
   986                           ;	CP = OFF, Code protection off
   987     2007                     	org	8199
   988     2007  3F3A               	dw	16186

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_display@msg	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_lcd_clear
    _main->_lcd_display
    _main->_lcd_init
    _lcd_init->_lcd_cmd
    _lcd_display->_lcd_cmd
    _lcd_display->_lcd_data
    _lcd_clear->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     168
                                              5 COMMON     2     2      0
                          _lcd_clear
                           _lcd_data
                        _lcd_display
                           _lcd_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_display                                          2     0      2     123
                                              3 COMMON     2     0      2
                            _lcd_cmd
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_clear
     _lcd_cmd
   _lcd_data
   _lcd_display
     _lcd_cmd
     _lcd_data
   _lcd_init
     _lcd_cmd
   _uart_init

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      7       9     64.3%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       9      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri May 30 20:07:59 2025

                      pc 0002             lcd_data@data 0072                       l61 07D1  
                     l54 07B0                       l72 074E                       l56 07B3  
                     l81 06EF                       l57 07B6                       l90 0782  
                     l58 07B9                       l75 0703                       l69 072C  
                     l78 0717                       u70 0754                       u71 0753  
                     u80 0761                       u81 0760                       u90 0782  
                     u91 0781                       fsr 0004                      l640 0714  
                    l720 0761                      l642 06F1                      l634 0705  
                    l722 0768                      l714 074F                      l650 0718  
                    l730 0788                      l644 06F5                      l636 0709  
                    l724 0774                      l716 0754                      l660 0745  
                    l652 0724                      l740 07A3                      l732 078D  
                    l646 06F6                      l662 06E0                      l638 070A  
                    l726 0776                      l718 075B                      l654 0727  
                    l750 07CC                      l742 07A9                      l734 0793  
                    l648 0700                      l664 06E6                      l656 0728  
                    l760 07F0                      l744 07BC                      l736 0795  
                    l728 0783                      l658 072D                      l754 07D7  
                    l738 079A                      l756 07E1                      l748 07BE  
                    l758 07EA                      _RB1 0031                      _RB3 0033  
                    u100 0793                      u101 0792                      u110 07D1  
                    u111 07D0                      u120 07D7                      u121 07D6  
                    u137 07DD                      u147 0749                      u157 070F  
                    u167 06EA                      u177 06FB                      fsr0 0004  
                   STR_1 0009                     STR_2 000F                     _RCIF 0065  
                   _TXIF 0064                     _main 0783                     btemp 007E  
                   start 0000                    ?_main 0070                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _TXREG 0019  
                  _TXSTA 0098          __end_of_lcd_cmd 0704                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_main 07FA                   ??_main 0075           lcd_display@msg 0073  
                 _TRISB1 0431                   _TRISB3 0433         __end_of_lcd_data 0718  
       __end_of_lcd_init 074F                ??_lcd_cmd 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 0783          lcd_display@line 0074  
              ?_lcd_data 0070                ?_lcd_init 0070               __stringtab 0003  
      __end_of_lcd_clear 06F0                  __ptext1 0718                  __ptext2 072D  
                __ptext3 074F                  __ptext4 0704                  __ptext5 06E0  
                __ptext6 06F0                  _lcd_cmd 06F0               ??_lcd_data 0070  
             ??_lcd_init 0073     end_of_initialization 07FC        __end_of_uart_init 072D  
             lcd_cmd@cmd 0072            ??_lcd_display 0075      start_initialization 07FA  
    __end_of_lcd_display 0783              __pbssCOMMON 0077                ___latbits 0002  
              _lcd_clear 06E0                __pstrings 0003                 ?_lcd_cmd 0070  
            _lcd_display 074F                _uart_init 0718               ?_lcd_clear 0070  
              _rx_buffer 0078              __stringbase 0008                _tx_buffer 0077  
             ?_uart_init 0070       __end_of__stringtab 0009                 _lcd_data 0704  
               _lcd_init 072D              ??_lcd_clear 0073                stringcode 0003  
            ??_uart_init 0070                 stringdir 0003                 stringtab 0003  
           ?_lcd_display 0073  
