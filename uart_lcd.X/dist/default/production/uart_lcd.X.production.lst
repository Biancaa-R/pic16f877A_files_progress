

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri May 30 23:09:06 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0004                     fsr             equ	4
    48     0004                     fsr0            equ	4
    49     0000                     indf            equ	0
    50     0000                     indf0           equ	0
    51     0002                     pc              equ	2
    52     0002                     pcl             equ	2
    53     000A                     pclath          equ	10
    54     0003                     status          equ	3
    55     0000                     INDF            equ	0	;# 
    56     0001                     TMR0            equ	1	;# 
    57     0002                     PCL             equ	2	;# 
    58     0003                     STATUS          equ	3	;# 
    59     0004                     FSR             equ	4	;# 
    60     0005                     PORTA           equ	5	;# 
    61     0006                     PORTB           equ	6	;# 
    62     0007                     PORTC           equ	7	;# 
    63     0008                     PORTD           equ	8	;# 
    64     0009                     PORTE           equ	9	;# 
    65     000A                     PCLATH          equ	10	;# 
    66     000B                     INTCON          equ	11	;# 
    67     000C                     PIR1            equ	12	;# 
    68     000D                     PIR2            equ	13	;# 
    69     000E                     TMR1            equ	14	;# 
    70     000E                     TMR1L           equ	14	;# 
    71     000F                     TMR1H           equ	15	;# 
    72     0010                     T1CON           equ	16	;# 
    73     0011                     TMR2            equ	17	;# 
    74     0012                     T2CON           equ	18	;# 
    75     0013                     SSPBUF          equ	19	;# 
    76     0014                     SSPCON          equ	20	;# 
    77     0015                     CCPR1           equ	21	;# 
    78     0015                     CCPR1L          equ	21	;# 
    79     0016                     CCPR1H          equ	22	;# 
    80     0017                     CCP1CON         equ	23	;# 
    81     0018                     RCSTA           equ	24	;# 
    82     0019                     TXREG           equ	25	;# 
    83     001A                     RCREG           equ	26	;# 
    84     001B                     CCPR2           equ	27	;# 
    85     001B                     CCPR2L          equ	27	;# 
    86     001C                     CCPR2H          equ	28	;# 
    87     001D                     CCP2CON         equ	29	;# 
    88     001E                     ADRESH          equ	30	;# 
    89     001F                     ADCON0          equ	31	;# 
    90     0081                     OPTION_REG      equ	129	;# 
    91     0085                     TRISA           equ	133	;# 
    92     0086                     TRISB           equ	134	;# 
    93     0087                     TRISC           equ	135	;# 
    94     0088                     TRISD           equ	136	;# 
    95     0089                     TRISE           equ	137	;# 
    96     008C                     PIE1            equ	140	;# 
    97     008D                     PIE2            equ	141	;# 
    98     008E                     PCON            equ	142	;# 
    99     0091                     SSPCON2         equ	145	;# 
   100     0092                     PR2             equ	146	;# 
   101     0093                     SSPADD          equ	147	;# 
   102     0094                     SSPSTAT         equ	148	;# 
   103     0098                     TXSTA           equ	152	;# 
   104     0099                     SPBRG           equ	153	;# 
   105     009C                     CMCON           equ	156	;# 
   106     009D                     CVRCON          equ	157	;# 
   107     009E                     ADRESL          equ	158	;# 
   108     009F                     ADCON1          equ	159	;# 
   109     010C                     EEDATA          equ	268	;# 
   110     010D                     EEADR           equ	269	;# 
   111     010E                     EEDATH          equ	270	;# 
   112     010F                     EEADRH          equ	271	;# 
   113     018C                     EECON1          equ	396	;# 
   114     018D                     EECON2          equ	397	;# 
   115     0000                     INDF            equ	0	;# 
   116     0001                     TMR0            equ	1	;# 
   117     0002                     PCL             equ	2	;# 
   118     0003                     STATUS          equ	3	;# 
   119     0004                     FSR             equ	4	;# 
   120     0005                     PORTA           equ	5	;# 
   121     0006                     PORTB           equ	6	;# 
   122     0007                     PORTC           equ	7	;# 
   123     0008                     PORTD           equ	8	;# 
   124     0009                     PORTE           equ	9	;# 
   125     000A                     PCLATH          equ	10	;# 
   126     000B                     INTCON          equ	11	;# 
   127     000C                     PIR1            equ	12	;# 
   128     000D                     PIR2            equ	13	;# 
   129     000E                     TMR1            equ	14	;# 
   130     000E                     TMR1L           equ	14	;# 
   131     000F                     TMR1H           equ	15	;# 
   132     0010                     T1CON           equ	16	;# 
   133     0011                     TMR2            equ	17	;# 
   134     0012                     T2CON           equ	18	;# 
   135     0013                     SSPBUF          equ	19	;# 
   136     0014                     SSPCON          equ	20	;# 
   137     0015                     CCPR1           equ	21	;# 
   138     0015                     CCPR1L          equ	21	;# 
   139     0016                     CCPR1H          equ	22	;# 
   140     0017                     CCP1CON         equ	23	;# 
   141     0018                     RCSTA           equ	24	;# 
   142     0019                     TXREG           equ	25	;# 
   143     001A                     RCREG           equ	26	;# 
   144     001B                     CCPR2           equ	27	;# 
   145     001B                     CCPR2L          equ	27	;# 
   146     001C                     CCPR2H          equ	28	;# 
   147     001D                     CCP2CON         equ	29	;# 
   148     001E                     ADRESH          equ	30	;# 
   149     001F                     ADCON0          equ	31	;# 
   150     0081                     OPTION_REG      equ	129	;# 
   151     0085                     TRISA           equ	133	;# 
   152     0086                     TRISB           equ	134	;# 
   153     0087                     TRISC           equ	135	;# 
   154     0088                     TRISD           equ	136	;# 
   155     0089                     TRISE           equ	137	;# 
   156     008C                     PIE1            equ	140	;# 
   157     008D                     PIE2            equ	141	;# 
   158     008E                     PCON            equ	142	;# 
   159     0091                     SSPCON2         equ	145	;# 
   160     0092                     PR2             equ	146	;# 
   161     0093                     SSPADD          equ	147	;# 
   162     0094                     SSPSTAT         equ	148	;# 
   163     0098                     TXSTA           equ	152	;# 
   164     0099                     SPBRG           equ	153	;# 
   165     009C                     CMCON           equ	156	;# 
   166     009D                     CVRCON          equ	157	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ADCON1          equ	159	;# 
   169     010C                     EEDATA          equ	268	;# 
   170     010D                     EEADR           equ	269	;# 
   171     010E                     EEDATH          equ	270	;# 
   172     010F                     EEADRH          equ	271	;# 
   173     018C                     EECON1          equ	396	;# 
   174     018D                     EECON2          equ	397	;# 
   175                           
   176                           	psect	nvCOMMON
   177     0076                     __pnvCOMMON:
   178     0076                     _value:
   179     0076                     	ds	1
   180     0018                     _RCSTA          set	24
   181     0008                     _PORTD          set	8
   182     001A                     _RCREG          set	26
   183     000C                     _PIR1           set	12
   184     0019                     _TXREG          set	25
   185     0006                     _PORTB          set	6
   186     0099                     _SPBRG          set	153
   187     0098                     _TXSTA          set	152
   188     0087                     _TRISC          set	135
   189     0081                     _OPTION_REG     set	129
   190     0088                     _TRISD          set	136
   191     0086                     _TRISB          set	134
   192                           
   193                           	psect	cinit
   194     07FB                     start_initialization:	
   195                           ; #config settings
   196                           
   197     07FB                     __initialization:
   198                           
   199                           ; Clear objects allocated to COMMON
   200     07FB  01F7               	clrf	__pbssCOMMON& (0+127)
   201     07FC                     end_of_initialization:	
   202                           ;End of C runtime variable initialization code
   203                           
   204     07FC                     __end_of__initialization:
   205     07FC  0183               	clrf	3
   206     07FD  120A  118A  2FA2   	ljmp	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMMON
   209     0077                     __pbssCOMMON:
   210     0077                     _rx_data:
   211     0077                     	ds	1
   212                           
   213                           	psect	cstackCOMMON
   214     0070                     __pcstackCOMMON:
   215     0070                     ?_uart_init:
   216     0070                     ?_main:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     0070                     main@argc:	
   220                           ; 2 bytes @ 0x0
   221                           
   222     0070                     ??_uart_init:	
   223                           ; 2 bytes @ 0x0
   224                           
   225                           
   226                           ; 1 bytes @ 0x0
   227     0070                     	ds	2
   228     0072                     main@argv:
   229                           
   230                           ; 2 bytes @ 0x2
   231     0072                     	ds	2
   232     0074                     ??_main:
   233                           
   234                           ; 1 bytes @ 0x4
   235     0074                     	ds	2
   236                           
   237                           	psect	maintext
   238     07A2                     __pmaintext:	
   239 ;;
   240 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   241 ;;
   242 ;; *************** function _main *****************
   243 ;; Defined at:
   244 ;;		line 30 in file "main.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;  argc            2    0[COMMON] int 
   247 ;;  argv            2    2[COMMON] PTR PTR unsigned char 
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  2    0[COMMON] int 
   252 ;; Registers used:
   253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : B00/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   259 ;;      Params:         4       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0
   261 ;;      Temps:          2       0       0       0       0
   262 ;;      Totals:         6       0       0       0       0
   263 ;;Total ram usage:        6 bytes
   264 ;; Hardware stack levels required when called: 1
   265 ;; This function calls:
   266 ;;		_uart_init
   267 ;; This function is called by:
   268 ;;		Startup code after reset
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272     07A2                     _main:	
   273                           ;psect for function _main
   274                           
   275     07A2                     l646:	
   276                           ;incstack = 0
   277                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   278                           
   279                           
   280                           ;main.c: 32:     uart_init();
   281     07A2  120A  118A  2786  120A  118A  	fcall	_uart_init
   282     07A7                     l648:
   283                           
   284                           ;main.c: 34:         value =PORTB;
   285     07A7  1283               	bcf	3,5	;RP0=0, select bank0
   286     07A8  1303               	bcf	3,6	;RP1=0, select bank0
   287     07A9  0806               	movf	6,w	;volatile
   288     07AA  00F6               	movwf	_value
   289                           
   290                           ;main.c: 35:         switch(value){
   291     07AB  2FC0               	goto	l660
   292     07AC                     l39:	
   293                           ;main.c: 36:             case 0xE0:
   294                           
   295                           
   296                           ;main.c: 37:                 TXREG='A';
   297     07AC  3041               	movlw	65
   298     07AD  0099               	movwf	25	;volatile
   299     07AE                     l650:
   300                           
   301                           ;main.c: 38:                 _delay((unsigned long)((100)*(6000000/4000.0)));
   302     07AE  30C3               	movlw	195
   303     07AF  00F5               	movwf	??_main+1
   304     07B0  30CD               	movlw	205
   305     07B1  00F4               	movwf	??_main
   306     07B2                     u37:
   307     07B2  0BF4               	decfsz	??_main,f
   308     07B3  2FB2               	goto	u37
   309     07B4  0BF5               	decfsz	??_main+1,f
   310     07B5  2FB2               	goto	u37
   311                           
   312                           ;main.c: 39:                 break;
   313     07B6  2FCE               	goto	l40
   314     07B7                     l41:	
   315                           ;main.c: 40:             case 0xD0:
   316                           
   317                           
   318                           ;main.c: 41:                 TXREG='B';
   319     07B7  3042               	movlw	66
   320     07B8  0099               	movwf	25	;volatile
   321     07B9  2FAE               	goto	l650
   322     07BA                     l42:	
   323                           ;main.c: 44:             case 0xB0:
   324                           
   325                           
   326                           ;main.c: 45:                 TXREG='C';
   327     07BA  3043               	movlw	67
   328     07BB  0099               	movwf	25	;volatile
   329     07BC  2FAE               	goto	l650
   330     07BD                     l43:	
   331                           ;main.c: 48:             case 0x70:
   332                           
   333                           
   334                           ;main.c: 49:                 TXREG='D';
   335     07BD  3044               	movlw	68
   336     07BE  0099               	movwf	25	;volatile
   337     07BF  2FAE               	goto	l650
   338     07C0                     l660:
   339     07C0  0876               	movf	_value,w
   340                           
   341                           ; Switch size 1, requested type "simple"
   342                           ; Number of cases is 4, Range of values is 112 to 224
   343                           ; switch strategies available:
   344                           ; Name         Instructions Cycles
   345                           ; simple_byte           13     7 (average)
   346                           ; jumptable            263     9 (fixed)
   347                           ;	Chosen strategy is simple_byte
   348     07C1  3A70               	xorlw	112	; case 112
   349     07C2  1903               	skipnz
   350     07C3  2FBD               	goto	l43
   351     07C4  3AC0               	xorlw	192	; case 176
   352     07C5  1903               	skipnz
   353     07C6  2FBA               	goto	l42
   354     07C7  3A60               	xorlw	96	; case 208
   355     07C8  1903               	skipnz
   356     07C9  2FB7               	goto	l41
   357     07CA  3A30               	xorlw	48	; case 224
   358     07CB  1903               	skipnz
   359     07CC  2FAC               	goto	l39
   360     07CD  2FCE               	goto	l40
   361     07CE                     l40:
   362                           
   363                           ;main.c: 53:         if (PIR1 & 0x20){
   364     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   365     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   366     07D0  1E8C               	btfss	12,5	;volatile
   367     07D1  2FD3               	goto	u21
   368     07D2  2FD4               	goto	u20
   369     07D3                     u21:
   370     07D3  2FA7               	goto	l648
   371     07D4                     u20:
   372     07D4                     l662:
   373                           
   374                           ;main.c: 55:         rx_data=RCREG;
   375     07D4  081A               	movf	26,w	;volatile
   376     07D5  00F7               	movwf	_rx_data
   377                           
   378                           ;main.c: 56:         switch(rx_data){
   379     07D6  2FEA               	goto	l676
   380     07D7                     l46:	
   381                           ;main.c: 57:             case 'a':
   382                           
   383                           
   384                           ;main.c: 59:                 PORTD=0x40;
   385     07D7  3040               	movlw	64
   386     07D8  0088               	movwf	8	;volatile
   387     07D9                     l664:
   388                           
   389                           ;main.c: 60:                 _delay((unsigned long)((100)*(6000000/4000.0)));
   390     07D9  30C3               	movlw	195
   391     07DA  00F5               	movwf	??_main+1
   392     07DB  30CD               	movlw	205
   393     07DC  00F4               	movwf	??_main
   394     07DD                     u47:
   395     07DD  0BF4               	decfsz	??_main,f
   396     07DE  2FDD               	goto	u47
   397     07DF  0BF5               	decfsz	??_main+1,f
   398     07E0  2FDD               	goto	u47
   399                           
   400                           ;main.c: 61:                 break;
   401     07E1  2FA7               	goto	l648
   402     07E2                     l48:	
   403                           ;main.c: 62:             case 'b':
   404                           
   405                           
   406                           ;main.c: 64:                 PORTD=0x02;
   407     07E2  3002               	movlw	2
   408     07E3  0088               	movwf	8	;volatile
   409     07E4  2FD9               	goto	l664
   410     07E5                     l668:
   411                           
   412                           ;main.c: 69:                 PORTD=0x00;
   413     07E5  0188               	clrf	8	;volatile
   414     07E6  2FD9               	goto	l664
   415     07E7                     l50:	
   416                           ;main.c: 72:             case 'd':
   417                           
   418                           
   419                           ;main.c: 74:                 PORTD=0x42;
   420     07E7  3042               	movlw	66
   421     07E8  0088               	movwf	8	;volatile
   422     07E9  2FD9               	goto	l664
   423     07EA                     l676:
   424     07EA  0877               	movf	_rx_data,w
   425                           
   426                           ; Switch size 1, requested type "simple"
   427                           ; Number of cases is 4, Range of values is 97 to 100
   428                           ; switch strategies available:
   429                           ; Name         Instructions Cycles
   430                           ; simple_byte           13     7 (average)
   431                           ; direct_byte           23    11 (fixed)
   432                           ; jumptable            263     9 (fixed)
   433                           ;	Chosen strategy is simple_byte
   434     07EB  3A61               	xorlw	97	; case 97
   435     07EC  1903               	skipnz
   436     07ED  2FD7               	goto	l46
   437     07EE  3A03               	xorlw	3	; case 98
   438     07EF  1903               	skipnz
   439     07F0  2FE2               	goto	l48
   440     07F1  3A01               	xorlw	1	; case 99
   441     07F2  1903               	skipnz
   442     07F3  2FE5               	goto	l668
   443     07F4  3A07               	xorlw	7	; case 100
   444     07F5  1903               	skipnz
   445     07F6  2FE7               	goto	l50
   446     07F7  2FA7               	goto	l648
   447     07F8  120A  118A  2800   	ljmp	start
   448     07FB                     __end_of_main:
   449                           
   450                           	psect	text1
   451     0786                     __ptext1:	
   452 ;; *************** function _uart_init *****************
   453 ;; Defined at:
   454 ;;		line 83 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;		None
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, status,2, status,0
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   468 ;;      Params:         0       0       0       0       0
   469 ;;      Locals:         0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0
   471 ;;      Totals:         0       0       0       0       0
   472 ;;Total ram usage:        0 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; This function calls:
   475 ;;		Nothing
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481     0786                     _uart_init:	
   482                           ;psect for function _uart_init
   483                           
   484     0786                     l600:	
   485                           ;incstack = 0
   486                           ; Regs used in _uart_init: [wreg+status,2+status,0]
   487                           
   488                           
   489                           ;main.c: 85:     TRISB=0xF0;
   490     0786  30F0               	movlw	240
   491     0787  1683               	bsf	3,5	;RP0=1, select bank1
   492     0788  1303               	bcf	3,6	;RP1=0, select bank1
   493     0789  0086               	movwf	6	;volatile
   494     078A                     l602:
   495                           
   496                           ;main.c: 86:     PORTB=0x00;
   497     078A  1283               	bcf	3,5	;RP0=0, select bank0
   498     078B  1303               	bcf	3,6	;RP1=0, select bank0
   499     078C  0186               	clrf	6	;volatile
   500                           
   501                           ;main.c: 88:     TRISD =0x00;
   502     078D  1683               	bsf	3,5	;RP0=1, select bank1
   503     078E  1303               	bcf	3,6	;RP1=0, select bank1
   504     078F  0188               	clrf	8	;volatile
   505                           
   506                           ;main.c: 89:     PORTD=0x00;
   507     0790  1283               	bcf	3,5	;RP0=0, select bank0
   508     0791  1303               	bcf	3,6	;RP1=0, select bank0
   509     0792  0188               	clrf	8	;volatile
   510     0793                     l604:
   511                           
   512                           ;main.c: 90:     OPTION_REG &= 0x7F;
   513     0793  307F               	movlw	127
   514     0794  1683               	bsf	3,5	;RP0=1, select bank1
   515     0795  1303               	bcf	3,6	;RP1=0, select bank1
   516     0796  0581               	andwf	1,f	;volatile
   517     0797                     l606:
   518                           
   519                           ;main.c: 92:     TRISC =0xC0;
   520     0797  30C0               	movlw	192
   521     0798  0087               	movwf	7	;volatile
   522     0799                     l608:
   523                           
   524                           ;main.c: 93:     TXSTA =0x20;
   525     0799  3020               	movlw	32
   526     079A  0098               	movwf	24	;volatile
   527     079B                     l610:
   528                           
   529                           ;main.c: 95:     SPBRG =0x09;
   530     079B  3009               	movlw	9
   531     079C  0099               	movwf	25	;volatile
   532     079D                     l612:
   533                           
   534                           ;main.c: 96:     RCSTA=0x90;
   535     079D  3090               	movlw	144
   536     079E  1283               	bcf	3,5	;RP0=0, select bank0
   537     079F  1303               	bcf	3,6	;RP1=0, select bank0
   538     07A0  0098               	movwf	24	;volatile
   539     07A1                     l56:
   540     07A1  0008               	return
   541     07A2                     __end_of_uart_init:
   542     0002                     ___latbits      equ	2
   543     007E                     btemp           set	126	;btemp
   544     007E                     wtemp0          set	126
   545                           
   546                           	psect	config
   547                           
   548                           ;Config register CONFIG @ 0x2007
   549                           ;	Oscillator Selection bits
   550                           ;	FOSC = EXTRC, RC oscillator
   551                           ;	Watchdog Timer Enable bit
   552                           ;	WDTE = OFF, WDT disabled
   553                           ;	Power-up Timer Enable bit
   554                           ;	PWRTE = OFF, PWRT disabled
   555                           ;	Brown-out Reset Enable bit
   556                           ;	BOREN = OFF, BOR disabled
   557                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   558                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   559                           ;	Data EEPROM Memory Code Protection bit
   560                           ;	CPD = OFF, Data EEPROM code protection off
   561                           ;	Flash Program Memory Write Enable bits
   562                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   563                           ;	In-Circuit Debugger Mode bit
   564                           ;	DEBUG = 0x1, unprogrammed default
   565                           ;	Flash Program Memory Code Protection bit
   566                           ;	CP = OFF, Code protection off
   567     2007                     	org	8199
   568     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     2      4       0
                                              0 COMMON     6     2      4
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _uart_init

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      6       8     57.1%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       8      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri May 30 23:09:06 2025

                     l40 07CE                       l41 07B7                       l50 07E7  
                     l42 07BA                       l43 07BD                       l46 07D7  
                     l39 07AC                       l56 07A1                       l48 07E2  
                     u20 07D4                       u21 07D3                       u37 07B2  
                     u47 07DD                      l600 0786                      l610 079B  
                    l602 078A                      l612 079D                      l604 0793  
                    l606 0797                      l608 0799                      l650 07AE  
                    l660 07C0                      l662 07D4                      l646 07A2  
                    l664 07D9                      l648 07A7                      l668 07E5  
                    l676 07EA                     _PIR1 000C                     _main 07A2  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TXREG 0019  
                  _TXSTA 0098                    _value 0076                    status 0003  
                  wtemp0 007E          __initialization 07FB             __end_of_main 07FB  
                 ??_main 0074  __end_of__initialization 07FC           __pcstackCOMMON 0070  
             __pnvCOMMON 0076               __pmaintext 07A2                  __ptext1 0786  
                _rx_data 0077     end_of_initialization 07FC        __end_of_uart_init 07A2  
    start_initialization 07FB              __pbssCOMMON 0077                ___latbits 0002  
              _uart_init 0786               ?_uart_init 0070                 main@argc 0070  
               main@argv 0072              ??_uart_init 0070               _OPTION_REG 0081  
